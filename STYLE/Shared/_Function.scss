@import "ColorProfiles";
@import "Config";

$enumerableProtectedWords: (First, Middle, Last);

@function mapExists($mapName) { 
    $result: map-get($mapIndex, toMapName($mapName));

    @if not ($result) {
        @warn "Map with name #{$mapName} doesn't exist";
    }

    @return $result;
}

@function getMap($mapName: Sys, $key: null) {
    $result: null;
    $mapName: toMapName($mapName);
    $map: map-get(map-get($mapIndex, $mapName), Data);

    @if (is(Number, $key)) {
        @if (is(List, $map)) {
            $result: nth($map, $key);
        }
        @else if (is(Map, $map)) {
            $i: 1;

            @each $k, $v in $map {
                @if (equal($key, $i)) {
                    $result: $v;
                }

                $i: $i + 1;
            }
        }
    }
    @else if (is(String, $key)) {
        @if (is(List, $map)) {
            @each $val in $map {
                @if (equal($key, $val)) {
                    $result: $val;
                }
            }
        }
        @else if (is(Map, $map)) {
            $result: getItem($map, $key);
        }
    }
    @else {
        $result: $map;
    }

    @return $result;
}

@function toMapName($name) {
    $result: null;

    @each $n, $v in $mapIndex {
        @if (equal($name, $n)) {
            $result: $n;
        }
    }

    @if not ($result) {
        @error "Map #{$name} doesn't exists";
    }

    @return $result;
}
@function sys($systemValueName) {
    $result: getMap(Sys, $systemValueName);

    @if (is(Null, $result)) {
        @error "System value namen #{$systemValueName} doesn't exist";
    }

    @return $result;
}


@function itemExists($coll, $item) {
    $result: false;

    @if (is(List, $coll)) {
        @each $itm in $coll {
            @if (equal($item, $itm)) {
                $result: true;
            }
        }
    }
    @else if (is(Map, $coll)) {
        @each $key, $vl in $coll {
            @if (equal($item, $key)) {
                $result: true;
            }
        }
    }
    @else {
        @error "$coll of type #{type-of($coll)} must be either List or Map";
    }

    @return $result;
}

@function str($str, $cmd: Lower) {
    $commands: ( to-upper, upper, up, u, to-lower, lower, low, lw, l, camel, to-string, string, str, to-number, number, numeric, nr, qoute, qt, unqoute, uqt, list );
    $result: null;

    @if (equal($cmd, to-upper, Upper, Up, U)) {
        $result: to-upper-case(inspect($str));
    }
    @else if (equal($cmd, to-lower, Lower, Low, Lw, L)) {
        $result: to-lower-case(inspect($str));
    }
    @else if (equal($cmd, Camel)) {
        $words: str($str, List);
        $i: 1;

        @each $val in $words {
            $val: to-upper-case(slice($val, 1 1)) + slice($val, 2, str-length($val));

            @if ($i == 1) {
                $result: $val;
            }
            @else {
                $result: " " + $val,
            }

            $i: $i + 1;
        }
    }
    @else if (equal($cmd, to-number, number, numeric, nr)) {
        $number: ( 1, 2, 3, 4, 5, 6, 7, 8, 9 );
        $numberStr: ( "1", "2", "3", "4", "5", "6", "7", "8", "9" );
        $result: 0;

        @for $i from 1 through len($str) {
            $char: str-slice($str, $i, $i);
            $index: index($numberStr, $char);

            @if ($index > 0) {
                $result: $result + nth($number, $index);
            }
            @else {
                @error "Can't convert #{$char} with value (#{str-index($str, $char)}) to string since it's not numeric'";
            }
        }
    }
    @else if (equal($cmd, to-string, string, str)) {
        @if (is(List, $str)) {
            $word: null;
            $result: ();

            @for $i from 1 through len($str) {
                $char: slice($str, $i, $i);

                @if not ($i == " ") {
                    $word: $word + slice($str, $i $i)
                }
                @else {
                    $result: append($result, $word);
                }
            }
        }
        @else {
            $result: inspect($str);
        }
    }
    @else if (equal($cmd, quote, qt)) {
        $result: quote($str);
    }
    @else if (equal($cmd, unqoute, uqt)) {
        $result: unqoute($str);
    }
    @else if (equal($cmd, List)) {
        $vals: ( One: 1, Two: 2, Three: 3, Four: 4, Five: 5, Six: 6, Seven: 7, Eight: 8, Nine: 9, Ten: 10, Eleven: 11, Twelve: 12, Thirteen: 13, Fourteen: 14, Fifteen: 15, Sixteen: 16, Seventeen: 17, Eightteen: 18, Nineteen: 19, Twenty: 20);
        $result: ();

        @each $s in $str {
            $s: to-upper-case(str-slice($s, 1, 1)) + str-slice($s, 2, str-length($s));

            $result: append($result, $s);
        }
    }
    @else {
        @error "$cmd with value #{$cmd} must be either #{$commands}";
    }

    @return $result;
}

@function replace($string, $original, $replace: "") {
    $result: null;
    $str: str($string);
    $index: str-index($str, $original);

    @if ($index) {
        $str: str-slice($str, 1, $index - 1) + $replace + replace(str-slice($str, $index + len($original)), $original, $replace);
    }

    @return $str;
}

@function equal($base, $vals...) {
    $result: false;

    @each $v in $vals {
        @if (to-upper-case(inspect($base)) == to-upper-case(inspect($v))) {
            $result: true;
        }
    }

    @return $result;
}

@function is($type, $vals...) {
    $type: to-lower-case($type);
    $types: ( string: ( type-of(string), type-of("string") ), str: ( type-of(string), type-of("string") ), number: ( type-of(123) ), nr: ( type-of(123) ), bool: ( type-of(true) ), enumerable: ( type-of(( 1, 2, 3 )), type-of(( one: 1, two: 2, three: 3 )) ), list: ( type-of(( 1, 2, 3)) ), map: ( type-of(( one: 1, two: 2, three: 3)) ), null: ( type-of(null) ), color: ( type-of(#fff) ) );
    $tps: map-get($types, $type);
    $result: true;
    $enumerableMatch: false;

    @each $val in $vals {
        @each $tp in $tps {
            @if not ($type == enumerable) and not (type-of($val) == $tp) {
                $result: false;
            }
            @else if ($type == enumerable) and (type-of($val) == $tp) {
                $enumerableMatch: true;
            }
        }
    }

    @if ($type == enumerable) {
        $result: $enumerableMatch;
    }

    @return $result;
}

@function len($obj) {
    $result: -1;

    @if (is(Enumerable, $obj)) {
        $result: length($obj);
    }
    @else {
        $result: str-length(inspect($obj));
    }

    @return $result;
}

@function indexOf($coll, $key) {
    $result: null;

    @if (is(List, $coll)) {
        $result: index($coll, $key);
    }
    @else if (is(Map, $coll)) {
        $i: 1;

        @each $k, $v in $coll {
            @if (equal($k, $key)) {
                $result: $i;
            }

            $i: $i + 1;
        }
    }
    @else {
        @error "$coll of type #{type-of($coll)} must be either Map or List";
    }

    @return $result;
}

@function between($min, $max, $val, $inclusive: false) {
    $result: false;

    @if (is(Number, $min, $max, $val)) {
        @if not ($inclusive) {
            $result: $val > $min and $val < $max;
        }
        @else {
            $result: $val >= $min and $val <= $max;
        }
    }
    @else {
        @error "Values must be numeric ($min: #{type-of($min)}, $max: #{type-of($max)}, $val: #{type-of($val)})";
    }

    @return $result;
}

@function itemIsLast($name, $index) {
    @return equal($index, len(getMap($name)));
}

@function getItem($coll, $selector, $mapItemPart: Value) {
    $result: null;
    $select: -1;

    @if not (is(String, $selector)) and not (is(Number, $selector)) {
        @error "$selector with value #{$selector} of type #{type-of($selector)} must be either String or Numeric";
    }

    @if (equal($selector, First, Middle, Last)) and (is(List, $coll)) or (is(Map, $coll)) {
        @if (equal($selector, First)) {
            $select: 1;
        }
        @else if (equal($selector, Middle)) {
            $select: ceil(len($coll) / 2);
        }
        @else if (equal($selector, Last)) {
            $select: len($coll);
        }
    }

    @if (is(List, $coll)) {
        @if (is(Number, $selector)) {
            $result: nth($coll, $selector);
        }
        @else if (is(String, $selector)) {
            @if ($select > 0) {
                $result: nth($coll, $select);
            }
            @else {
                @each $item in $coll {
                    @if (equal($selector, $item)) {
                        $result: $item;
                    }
                }
            }
        }
    }
    @else if (is(Map, $coll)) {
        @if (is(Number, $selector)) {
            $i: 1;

            @each $n, $v in $coll {
                @if (equal($i, $selector)) {
                    $result: $v;
                }

                $i: $i + 1;
            }
        }
        @else if (is(String, $selector)) {
            $foo: 1;

            @each $nm, $vl in $coll {
                @if (equal($nm, $selector)) {
                    $select: $foo;
                }

                $foo: $foo + 1;
            }

            @if ($select > 0) {
                $tmp: nth($coll, $select);

                @if (equal($mapItemPart, Name)) {
                    $result: nth($tmp, 1);
                }
                @else if (equal($mapItemPart, Value)) {
                    $result: nth($tmp, 2);
                }
                @else if (equal($mapItemPart, All)) {
                    $result: $tmp;
                }
                @else {
                    @error "$mapItemPart equals #{$mapItemPart} must equal either #{$enumerableProtectedWords}";
                }
            }
        }
    }  
    @else {
        @error "$coll of type #{type-of($coll)} can be either List or Map";
    }

    @return $result;
}

@function isProtected($val) {
    $result: false;

    @each $w in $enumerableProtectedWords {
        @if (equal($w, $val)) {
            $result: true;
        }
    }

    @return $result;
}

@function getSizeName($size: MD) {
    @return getMap(SizeName, $size);
}

@function KW($name) {
    @return getMap(KW, $name);
}