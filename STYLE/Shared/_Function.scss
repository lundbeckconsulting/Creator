@import "ColorProfiles";
@import "Config";

@function color($profileName: Default, $color: Primary) {
    $result: null;
    $profileName: toCPName($profileName);

    @if (equal($color, First)) {
        $color: Primary;
    }
    @else if (equal($color, Middle)) {
        $color: Third;
    }
    @else if (equal($color, Last)) {
        $color: Fifth;
    }

    $color: toColorName($color);

    @if (map-has-key($CPs, $profileName)) {
        $tmp: map-get($CPs, $profileName);

        @if (map-has-key($tmp, $color)) {
            $result: map-get($tmp, $color);
        }
        @else {
            @error "Can't find color #{$color}";
        }
    }
    @else {
        @error "Can't find Color Profile #{$name}";
    }

    @return $result;
}

@function mapExists($mapName, $throwError: false) {
    $result: map-has-key($mapIndex, toMapName($mapName));

    @if not ($result) and ($throwError) {
        @error "Can't find #{mapName} in MapIndex";
    }

    @return $result;
}

@function keyExists($mapName, $key, $throwError: false) {
    $result: false;

    @if (mapExists($mapName, true)) {
        $map: get($mapName);
        $result: map-has-key($map, $key);

        @if not($result) and ($throwError) {
            @error "#{$key} doesn't exist in #{$mapName}";
        }
    }

    @return $result;
}

@function get($mapName: Sys, $key: null) {
    $result: null;
    $mapName: toMapName($mapName);

    @if (mapExists($mapName, true)) {
        $map: map-get(map-get($mapIndex, $mapName), Data);

        @if ($key) {
            @if not(isType($key, Number)) {
                @if (map-has-key($map, $key)) {
                    $result: map-get($map, $key);
                }
                @else {
                    @error "Can't find key #{$key} in #{$mapName}";
                }
            }
            @else {
                $i: 1;

                @each $k, $v in $map {
                    @if (equal($i, $key)) {
                        $result: $v;
                    }

                    $i: $i + 1;
                }

                @if not($result) {
                    @error "Can't find element with index #{$key} in #{$mapName}";
                }
            }
        }
        @else {
            $result: $map;
        }
    }

    @return $result;
}

@function upper($str) {
    @return to-upper-case(toString($str));
}

@function up($str) {
    @return upper($str);
}

@function lower($str) {
    @return to-lower-case(toString($str));
}

@function low($str) {
    @return lower($str);
}

@function toString($str) {
    @return inspect($str);
}

@function str($str, $cmd) {
    $commands: ( upper, up, lower, low, lw, camel, to-string, string, str, to-number, number, numeric, nr, qt, uqt, list );
    $cmd: to-lower-case($cmd);
    $result: null;

    @if not (index($commands, $cmd) > 0) {
        @error "Command #{$cmd} not supported. Supported commands are #{listToString($commands)}";
    }

    @if (equal($cmd, Upper, Up)) {
        $result: to-upper-case($str);
    }
    @else if (equal($cmd, Lower, Low, Lw)) {
        $result: to-lower-case($str);
    }
    @else if (equal($cmd, Camel)) {
        $words: strTransform($str, List);
        $i: 1;

        @each $val in $words {
            $val: to-upper-case(slice($val, 1 1)) + slice($val, 2, str-length($val));

            @if ($i == 1) {
                $result: $val;
            }
            @else {
                $result: " " + $val,
            }

            $i: $i + 1;
        }
    }
    @else if (equal($cmd, to-number, number, numeric)) {
        $number: ( 1, 2, 3, 4, 5, 6, 7, 8, 9 );
        $numberStr: ( "1", "2", "3", "4", "5", "6", "7", "8", "9" );
        $result: 0;

        @for $i from 1 through str-length($str) {
            $char: str-slice($str, $i, $i);
            $index: index($numberStr, $char);

            @if ($index > 0) {
                $result: $result + nth($number, $index);
            }
            @else {
                @error "Couldn't convert string since character #{$char} (#{str-index($str, $char)}) is not numeric'";
            }
        }
    }
    @else if (equal($cmd, to-string, string, str)) {
        $result: inspect($str);
    }
    @else if (equal($cmd, to-number, number, numeric, nr)) {
        $numbers: ( 1, 2, 3, 4, 5, 6, 7, 8, 9 );

        @for $i from 1 through str-length($str) {
            $char: str-slice($str, $i, $i);
            $index: index($numbers, unqoute($char));

            @if ($index > 0) {
                $result: $result + nth($numbers, $index);
            }
            @else {
                @error "Couldn't convert string to number because the character #{$char} was not recognized as numeric'";
            }
        }
    }
    @else if (equal($cmd, qt)) {
        $result: quote($str);
    }
    @else if (equal($cmd, unqt)) {
        $result: unqoute($str);
    }
    @else if (equal($cmd, list)) {
        $word: null;
        $result: ();

        @for $i from 1 through str-length($str) {
            $char: slice($str, $i, $i);

            @if not ($i == " ") {
                $word: $word + slice($str, $i $i)
            }
            @else {
                $result: append($result, $word);
            }
        }
    }

    @return $result;
}

@function listToString($list, $separator: ",") {
    $result: "";
    $i: 1;

    @each $val in $list {
        @if ($i > 1) {
            $result: $result + "#{$separator} ";
        }

        $result: $result + $val;
    }

    @return result;
}

@function replace($string, $original, $replace: "") {
    $result: null;
    $str: toString($string);
    $index: str-index($str, $original);

    @if ($index) {
        $str: str-slice($str, 1, $index - 1) + $replace + replace(str-slice($str, $index + len($original)), $original, $replace);
    }

    @return $str;
}

@function equal($base, $vals...) {
    $result: false;

    @each $v in $vals {
        @if (upper($base) == upper($v)) {
            $result: true;
        }
    }

    @return $result;
}

@function isType($val, $type) {
    $result: true;
    $types: ( string: string, number: number, bool: boolean, list: list, map: map, null: null );
    $t: type-of($val);
    $tp: map-get($types, lower($type));

    @return equal($type, $t);;
}

@function isTypes($type, $vals...) {
    $result: true;

    @each $v in $vals {
        @if not (isType($v, $type)) {
            $result: false;
        }
    }

    @return $result;
}

@function len($obj) {
    $result: -1;

    @if (isType($obj, List)) or (isType($obj, Map)) {
        $result: length($obj);
    }
    @else {
        $result: str-length(toString($obj));
    }

    @return $result;
}

@function toMapName($name) {
    $result: null;

    @each $n, $v in $mapIndex {
        @if (equal($name, $n)) {
            $result: $n;
        }
    }

    @if not($result) {
        @error "Can't find map #{$name} in MapIndex";
    }

    @return $result;
}

@function toCPName($name) {
    $result: null;

    @each $n, $v in $CPs {
        @if (equal($name, $n)) {
            $result: $n;
        }
    }

    @if not($result) {
        @error "Can't find Color Profile #{$name}";
    }

    @return $result;
}

@function toColorName($name) {
    $result: null;

    @each $val, $color in $cpDefault {
        @if (equal($name, $val)) {
            $result: $val;
        }
    }

    @if not($result) {
        @error "Can't find Color #{$name}";
    }

    @return $result;
}

@function collectionContains($coll, $key) {
    @if not (isCollection(($coll))) {
        @error "$coll is #{type-of($coll)} but must be type Map or List";
    }

    @return (indexOf($coll, $key));
}

@function indexOf($coll, $key) {
    $result: null;

    @if (isType($coll, List)) {
        $result: index($coll, $key);
    }
    @else if (isType($coll, Map)) {
        $i: 1;

        @each $k, $v in $coll {
            @if (equal($k, $key)) {
                $result: $i;
            }

            $i: $i + 1;
        }
    }
    @else {
        @error "$coll must be type Map or List";
    }

    @return $result;
}

@function between($min, $max, $val, $inclusive: false) {
    $result: false;

    @if (isNumeric($min, $max, $val)) {
        @if not($inclusive) {
            $result: $val > $min and $val < $max;
        }
        @else {
            $result: $val >= $min and $val <= $max;
        }
    }
    @else {
        @error "Values must be numeric";
    }

    @return $result;
}

@function isLast($name, $index) {
    @return equal($index, len(get($name)));
}

@function getItem($coll, $selector) {
    $result: null;

    @if (isType($coll, List)) {
        @if (isType($selector, Number)) {
            $result: nth($coll, $selector);
        }
        @else if (isType($coll, Map)) {
            @if (isType($selector, Number)) {
                $i: 1;

                @each $n, $v in $coll {
                    @if (equal($i, $selector)) {
                        $result: $v;
                    }

                    $i: $i + 1;
                }
            }
            @else if (isType($selector, String)) {
                @if (map-has-key($coll, $selector)) {
                    $result: map-get($coll, $selector);
                }
            }
        }
        @else {
            @each $item in $coll {
                @if (equal($item, $selector)) {
                    $result: $item;
                }
            }
        }
    }
    @else {
        @error "$coll must be either List or Map but was #{type-of($coll)}";
    }

    @return $result;
}

@function strNumbersToList($str) {
    $vals: ( One: 1, Two: 2, Three: 3, Four: 4, Five: 5, Six: 6, Seven: 7, Eight: 8, Nine: 9, Ten: 10, Eleven: 11, Twelve: 12, Thirteen: 13, Fourteen: 14, Fifteen: 15, Sixteen: 16, Seventeen: 17, Eightteen: 18, Nineteen: 19, Twenty: 20);
    $result: ();

    @each $s in $str {
        $s: to-upper-case(str-slice($s, 1, 1)) + str-slice($s, 2, str-length($s));

        $result: append($result, $s);
    }

    @return result;
}
