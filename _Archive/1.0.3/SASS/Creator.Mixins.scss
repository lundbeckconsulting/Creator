@import "Creator.Variables.scss";
@import "Creator.Functions.scss";

@mixin media($size: MD, $orientation: 0, $mode: Up) {
    $s: size(Breakpoint, $size);
    $o: Any;
    $query: null;

    @if ($mode == Up) {
        $query: "(min-width: " + $s + ")";
    }
    @else if ($mode == Down) {
        $query: "(max-width: " + $s + ")";
    }
    @else if ($mode == Only) {
        $query: "(min-width: " + $s + ")";

        @if ($size != XL) {
            $i: index(($mediaBreakpointSizes), ($size $s));
            $max: null;

            @if ($size == XS) {
                $max: sm;
            }
            @else if ($size == SM) {
                $max: md;
            }
            @else if ($size == MD) {
                $max: lg;
            }
            @else if ($size == LG) {
                $max: xl;
            }

            $max: breakpointWidth($max);

            $query: $query + " and (max-width: " + $max + ")";
        }
    }

    @if ($orientation == 0 or $orientation == 1 or $orientation == 2) {
        $o: map-get($mediaBreakpointOrientations, $orientation);
    }
    @else if ($orientation == Up or $orientation == Down or $orientation == Only) {
        $o: $orientation;
    }

    @if ($o != Any) {
        $query: $query + " and (orientation: " + $o + ")";
    }

    @media #{$query} {
        @content;
    }
}

@mixin bgCover($fixed: true) {
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;

    @if ($fixed) {
        background-attachment: fixed;
    }
}

@mixin bgCoverWithImage($path) {
    background-image: url($path);

    @include bgCover();
}

@mixin fontOutline($size, $color: white, $outlineColor: black) {
    $s: map-get($fontOutlineSizes, $size);

    color: $color;
    -webkit-text-stroke-width: $s;
    -webkit-text-stroke-color: $outlineColor;
}

@mixin fadeAnimation($direction, $movement: ease-in) {
    $name: fadeIn;
    $speed: 6s;

    @if ($direction == out) {
        $name: fadeOut;
        $speed: 4s;
    }

    animation-play-state: paused;
    animation: $name $speed $movement;
    animation-play-state: running;
}

@mixin defaultResponsive($max-width: 100%, $minWidth: unset) {
    width: 100%;
    height: auto;
    min-width: $minWidth;
    max-width: $max-width;
}

@mixin gridRow() {
    display: flex;
    width: 100%;
    height: auto;
}

@mixin invalidStyle1($colorName: Danger, $overrideColor: none) {
    $color: color($colorName);

    @if ($overrideColor != none) {
        $color: $overrideColor;
    }
    
    &:invalid {
        @include effect(BoxShadow, 10px, $color);
    }
}

@mixin checkboxStyle1($colorName: Default, $overrideColor: none) {
    $color: color($colorName);

    @if ($overrideColor != none) {
        $color: $overrideColor;
    }

    position: absolute;
    opacity: 0;

    & + label {
        position: relative;
        cursor: pointer;
        padding: 0;
    }

    & + label:before {
        content: '';
        margin-right: 10px;
        display: inline-block;
        vertical-align: text-top;
        width: 20px;
        height: 20px;
        background: white;
    }

    &:hover + label:before {
        background: $color;
    }
    
    &:focus + label:before {
        box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.12);
    }
    
    &:checked + label:before {
        background: lighten($color, 12%);
    }
    
    &:disabled + label {
        color: #b8b8b8;
        cursor: auto;
    }
    
    &:disabled + label:before {
        box-shadow: none;
        background: #ddd;
    }
    
    &:checked + label:after {
        content: '';
        position: absolute;
        left: 5px;
        top: 9px;
        background: white;
        width: 2px;
        height: 2px;
        box-shadow: 2px 0 0 white, 4px 0 0 white, 4px -2px 0 white, 4px -4px 0 white, 4px -6px 0 white, 4px -8px 0 white;
        transform: rotate(45deg);
    }
}

@mixin gridColumn($nr: 0, $breakpoint: none) {
    display: block;
    padding: $defaultPaddingSize;

    $p: 100%;

    @if ($nr != 0) {
        @if ($breakpoint != none) {
            @include media($breakpoint) {
                $p: percentage(strip-units($nr) / 12);

                flex: 1 1 $p;
                max-width: $p;
            }
        }
    }
    @else {
        flex: 1 1 auto;
        max-width: $p;
    }
}

@mixin noOverflow() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin defaultButton($colorName: Default, $overrideColor: none) {
    $color: color($colorName);
    $foreground: white;

    @if ($overrideColor != none) {
        $color: $overrideColor;
    }

    @if ($colorName == Light or $colorName == Disabled or $colorName == Warning or $colorName == Safe or $colorName == Light) {
        $foreground: black;
    }

    padding-left: 22px;
    padding-right: 22px;
    padding-top: 8px;
    padding-bottom: 8px;
    margin-top: margAndPad(SM);
    margin-bottom: margAndPad(SM);
    border-radius: $formControlBorderRadius;
    border: 1px solid $color;
    font-size: 1.1em;
    font-weight: normal;
    background-color: $color;
    color: $foreground;

    @if ($colorName == Disabled) {
        @include disabledStyle1();
    }
    @else {
        @include hoverStyle1($colorName, 8px, $overrideColor);
        @include focusStyle1($colorName, 12px, $overrideColor);
    }
}

@mixin defaultTextbox($colorName: Default, $overrideColor: none) {
    $color: none;

    @if ($overrideColor != none) {
        $color: $overrideColor;
    }

    @include formControlStyle1($colorName, $color);

    @if ($colorName != Disabled) {
        @include invalidStyle1();
    }
}

@mixin hoverStyle1($colorName: Default, $shadowSize: 16px, $overrideColor: none) {
    $color: color($colorName);

    @if ($overrideColor != none) {
        $color: $overrideColor;
    }

    &:hover {
        cursor: pointer;
        
        @include effect(BoxShadow, $shadowSize, $color);
    }
}

@mixin disabledStyle1() {
    font-style: italic;
    opacity: 0.7;

    &:disabled {
        opacity: 0.6;
        pointer-events: none;
    }
}

@mixin effect($name: BoxShadow, $size: 16px, $color: color(safe)) {
    @if ($name == BoxShadow) {
        box-shadow: 0 0 $size $color;
        transition-delay: .1s;
        transition-property: all;
    }
}

@mixin focusStyle1($colorName: Default, $size: 16px, $overrideColor: none) {
    $color: darken(color($colorName), 8%);

    @if ($overrideColor != none) {
        $color: $overrideColor;
    }

    &:focus {
        @include effect(BoxShadow, $size, $color);
    }
}

@mixin formControlStyle1($colorName: Default, $overrideColor: none, $hoverGlowSize: 16px) {
    $color: color($colorName);
    $foreground: color($colorName);
    $padding: 2px;

    @if ($colorName == Dark) {
        $foreground: white;
    }

    @if ($overrideColor != none) {
        $color: $overrideColor;
    }

    min-height: 40px;
    border: 2px solid $color;
    border-radius: $formControlBorderRadius;
    padding-left: $padding + 6;
    padding-right: $padding + 6;
    padding-top: $padding;
    padding-bottom: $padding;
    font-size: 1.2em;
    color: $foreground;
    margin-top: 4px;
    margin-bottom: 4px;

    @if ($colorName != Disabled) {
        @include hoverStyle1($colorName, $hoverGlowSize, $overrideColor);
        @include focusStyle1($colorName, $hoverGlowSize, $overrideColor);
    }
    @else {
        @include disabledStyle1();
    }
}

@mixin modalControl($size: MD, $colorName: Default, $bgColor: white) {
    $color: color($colorName);
    $maxWidth: modalSize($size);

    display: none;
    position: fixed;
    background-color: $bgColor;
    top: 16px;
    border: 8px solid $color;
    border-radius: 8px;
    width: 100%;
    max-width: $maxWidth;
    z-index: 67;

    @include centerAbsolute();
    @include modalHeader($colorName);
}

@mixin modalHeader($colorName: Default, $overrideColor: none) {
    $color: color($colorName);
    $headerTextColor: black;
    $closeIconColor: color(Danger);

    @if ($overrideColor != none) {
        $color: $overrideColor;
    }
    @else if ($colorName == Default or $colorName == Primary or $colorName == Success OR $colorName == Danger or $colorName == Info or $colorName == Safe or $colorName == Dark) {
        $headerTextColor: white;
        $closeIconColor: white;
    }

    & > .#{miscPrefix(ModalHeader)} {
        $pullUpSize: -4px;

        display: flex;
        align-items: center;
        background-color: $color;

        & > .#{miscPrefix(ModalHeaderLabel)} {
            flex: 1 1 auto;
            font-size: 1.4em;
            font-weight: bold;
            color: $headerTextColor;
            padding: margAndPad(XS);
            position: relative;
            top: $pullUpSize;
        }

        & > .#{miscPrefix(ModalHeaderCloseIcon)} {
            flex: 0 0 26px;
            font-size: 1.8em;
            text-align: right;
            color: $closeIconColor;
            margin: margAndPad(XS);
            position: relative;
            top: $pullUpSize;

            &:hover {
                cursor: pointer;
            }
        }
    }

    & > .#{miscPrefix(ModalBody)} {
        padding: $docPaddingSize;
    }
}

@mixin defaultNotifier($textAlign: Center) {
    display: none;
    font-weight: bold;
    padding: $docPaddingSize;
    position: fixed;
    text-align: lower($textAlign);

    &.show {
        display: block;
    }

    & > .body {
        display: flex;
        justify-content: center;

        & > .label {
            flex: 1 1 auto;
        }

        & > .close-icon {
            flex: 0 0 20px;
            text-align: right;
            font-size: headerSize(5);
        }
    }

    @each $align in $alignValues {
        &.#{layoutPrefix(Align) + "-" + lower($align)} {
            text-align: lower($align);
        }
    }
}

@mixin centerAbsolute() {
    left: 50%;
    transform: translate(-50%);
}

@mixin selectControl($colorName: Default, $overrideColor: none) {
    $color: color($colorName);

    @if ($overrideColor != none) {
        $color: $overrideColor;
    }

    cursor: pointer;
    padding: 10px 15px;
    outline: 0;
    border: 2px solid $color;
    border-radius: $formControlBorderRadius;
    background: white;
    appearance: none;
    font-size: 1em;

    &::-ms-expand {
        display: none;
    }

    @if ($colorName == Light) {
        $color: #b08a45;
    }
    
    color: $color !important;

    @include formControlStyle1($colorName, $overrideColor);
}