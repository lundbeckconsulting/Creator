@import "Creator.Variables.scss";
@import "Creator.Mixins.scss";
@import "Creator.Functions.scss";

@each $dir in $alignValues {
    .#{layoutPrefix(Align) + "-" + lower($dir)} {
        text-align: $dir;
    }
}

@each $name, $val in $justifyContentValues {
    .#{layoutPrefix(Justify) + "-" + lower($name)} {
        justify-content: $val;
    }
}

@each $breakpoint in $mediaBreakpoints {
    .#{layoutPrefix(Float) + "-" + lower($breakpoint) + "-left"} {
        float: left;
    }

    .#{layoutPrefix(Float) + "-" + lower($breakpoint) + "-right"} {
        float: right;
    }

    .#{layoutPrefix(Margin) + "-" + lower($breakpoint)} {
        margin: margAndPad($breakpoint);
    }

    .#{layoutPrefix(Padding) + "-" + lower($breakpoint)} {
        padding: margAndPad($breakpoint); 
    }

    .#{layoutPrefix(Font) + "-" + lower($breakpoint)} {
        font-size: fontSize($breakpoint);
    }

    .#{layoutPrefix(Font) + "-b-" + lower($breakpoint)} {
        font-size: fontSize($breakpoint);
        font-weight: bold;
    }

    .#{layoutPrefix(Icon) + "-" + lower($breakpoint)} {
        font-size: iconSize($breakpoint);
    }

    .#{lower($breakpoint) + "-hide"} {
        @include media($breakpoint) {
            display: none;
        }
    }

    .#{lower($breakpoint) + "-show"} {
        @include media($breakpoint) {
            display: block;
        }
    }

    @each $dir in $directionValues {
        .#{layoutPrefix(Padding) + "-" + lower($breakpoint) + "-" + lower($dir)} {
            #{"padding"}-#{lower($dir)}: margAndPad($breakpoint);
        }

        @if ($dir == Left) {
            .#{layoutPrefix(Padding) + "-" + lower($breakpoint) + "-left-right" } {
                padding-left: margAndPad($breakpoint);
                padding-right: margAndPad($breakpoint);
            }
        }
        @else if ($dir == Top) {
            .#{layoutPrefix(Padding) + "-" + lower($breakpoint) + "-top-bottom" } {
                padding-top: margAndPad($breakpoint);
                padding-bottom: margAndPad($breakpoint);
            }
        }

        .#{layoutPrefix(Margin) + "-" + lower($breakpoint) + "-" + lower($dir)} {
            #{"margin"}-#{lower($dir)}: margAndPad($breakpoint);
        }

        @if ($dir == Left) {
            .#{layoutPrefix(Margin) + "-" + lower($breakpoint) + "-left-right" } {
                margin-left: margAndPad($breakpoint);
                margin-right: margAndPad($breakpoint);
            }
        }

        @else if ($dir == Top) {
            .#{layoutPrefix(Margin) + "-" + lower($breakpoint) + "-top-bottom" } {
                margin-top: margAndPad($breakpoint);
                margin-bottom: margAndPad($breakpoint);
            }
        }
    }

    @each $dis in $displayValues {
        .#{lower($breakpoint) + "-" + lower($dis)} {
            @include media($breakpoint) {
                display: lower($dis);
            }
        }

        .#{lower($breakpoint) + "-" + lower($dis) + "-hide"} {
            display: none;
        }
    }

    @if ($breakpoint != XS) {
        @each $pre, $orientation in $mediaBreakpointOrientations {
            @include media($breakpoint, $orientation) {
                $s: commonMediaSize($breakpoint);

                #{"input[type='hidden']#creator-" + commonControlName(Default)} {
                    z-index: $s !important;
                }

                #{"input[type='hidden']#creator-" + commonControlName(Orientation)} {
                    z-index: $s !important;
                }
            }
        }
    }
}

@each $aName, $aValue in $alignItemValues {
    @each $name, $value in $justifyContentValues {
        .#{layoutPrefix(Flex) + "-" + lower($aName) + "-" + lower($name)} {
            display: flex;
            align-items: $aValue;
            justify-content: $value;
        }
    }
}

@each $name, $val in $opacityValues {
    .#{layoutPrefix(Opacity) + "-" + $name} {
        opacity: $val;
    }
}

@each $dis in $displayValues {
    .#{layoutPrefix(Display) + "-" + lower($dis)} {
        display: lower($dis);
    }
}

@each $name, $val in $headerSizes {
    .#{layoutPrefix(Heading) + "-" + lower($name)} {
        @if ($name != 5) {
            font-size: $val - 0.8em;
        }
        @else {
            font-size: $val - 0.3em;
        }

        margin: 0px;
    }

    @each $cName, $cValue in $colors {
        .#{layoutPrefix(Heading) + "-" + lower($name) + "-" + lower($cName)} {
            @if ($name != 5) {
                font-size: $val - 0.8em;
            }
            @else {
                font-size: $val - 0.3em;
            }
             
            margin: 0px;
            color: $cValue;
        }
    }

    @include media(MD) {
        .#{layoutPrefix(Heading) + "-" + lower($name)} {
            font-size: $val;
            margin: 0px;
        }
    }

    @each $cName, $cValue in $colors {
        @include media(MD) {
            .#{layoutPrefix(Heading) + "-" + lower($name) + "-" + lower($cName)} {
                font-size: $val;
                margin: 0px;
            }
        }
    }
}

@each $name, $val in $fontOutlineSizes {
    .#{layoutPrefix(Font) + "-outline-" + lower($name)} {
        @include fontOutline($name);
    }
}

@each $name, $val in $colors {
    .#{"color-" + lower($name)} {
        color: $val;
    }

    .#{"bg-" + lower($name)} {
        background-color: $val;
    }

    .#{layoutPrefix(Heading) + "-" + lower($name)} {
        color: $val;
    }
}

@each $name, $value in $positionValues {
    .#{layoutPrefix(Background) + "-" + lower($name)} {
        background-position: $value;
    }
}

@each $val in $backgroundRepeatValues {
    .#{layoutPrefix(Background) + "-" + lower($val)} {
        background-repeat: lower($val);
    }
}

.table-auto {
    display: table;
    margin: auto;
}

.#{layoutPrefix(Margin) + "-auto"} {
    margin: auto;
}

.pad-none {
    padding: 0px;
}

.#{"no-" + layoutPrefix(Margin)} {
    margin: 0px;
}

.pm-none {
    padding: 0px;
    margin: 0px;
}

.#{layoutPrefix(Flex) + "-no-wrap"} {
    flex-wrap: nowrap;
}

.#{layoutPrefix(Flex) + "-wrap"} {
    flex-wrap: wrap;
}

.#{layoutPrefix(Flex) + "-wrap-reverse"} {
    flex-wrap: wrap-reverse;
}

.hide {
    display: none;
}

.block {
    display: block;
}

.#{layoutPrefix(Bold)} {
    font-weight: bold;
}

.pad-doc {
    padding: $docPaddingSize;
}

.float-left {
    float: left;
}

.float-right {
    float: right;
}

*, *:before, *:after {
    -webkit-box-sizing: inherit;
    -moz-box-sizing: inherit;
    box-sizing: inherit;
}

.html {
    width: 100%;
    height: 100%;
    font-size: 100%;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.body {
    height: 100%;
    margin: 0px;

    & > header.header {
        @include defaultResponsive($bodyContentMaxWidthSize);
        margin: auto;

        & nav.top-nav {
        }
    }

    & main.main {
        & > .content {
            @include defaultResponsive($bodyContentMaxWidthSize);
            margin: auto;
        }
    }

    & hr.footer {
        box-shadow: 2px 2px 2px;
        margin-bottom: 16px;
        max-width: $bodyContentMaxWidthSize;
    }

    & footer.footer {
        @include defaultResponsive($bodyContentMaxWidthSize);
        margin: auto;
        padding: 4px;
    }
}

.top-fixed {
    position: fixed;
    top: 0;
    bottom: unset;
    left: 0;
    right: 0;
}

.bg-cover {
    @include bgCover(false);
}

.bg-cover-fixed {
    @include bgCover();
}

.r {
    @include defaultResponsive();
}

.no-overflow {
    @include noOverflow();
}

input[type='hidden']#creator-media {
    z-index: 0;
}

input[type='hidden']#creator-media-orientation {
    z-index: 0;
}