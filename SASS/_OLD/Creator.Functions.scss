@import "Creator.Variables.scss";

@function strip-units($val) {
    @return $val / ($val * 0 + 1);
}

@function first($list) {
    @return nth($list, 1);
}

@function last($list) {
    @return nth($list, length($list));
}

@function isString($source) {
    @return isTypeOf($source, string);
}

@function isNumeric($source) {
    @return isTypeOf($source, number);
}

@function isBool($source) {
    @return isTypeOf($source, bool);
}

@function isColor($source) {
    @return isTypeOf($source, color);
}

@function isList($source) {
    @return isTypeOf($source, list);
}

@function isMap($source) {
    @return isTypeOf($source, map);
}

@function existsInMap($map, $key) {
    @return map-has-key($map, $key);
}

@function isTypeOf($source, $type) {
    @return type-of($source) == $type;
}

@function toString($source) {
    @return inspect($source);
}

@function toBool($source) {
    @return not ($source or $source == "" or $source == 0 or $source == ());
}

@function childByIndex($source, $index) {
    $result: null;

    @if ($index <= length($source)) {
        $i: 1;

        @each $val in $source {
            @if ($i == $index) {
                $result: $val;
            }

            $i: $i + 1;
        }
    }

    @return result;
}

@function appendList($source, $listToAppend) {
    $result: $source;

    @each $item in $listToAppend {
        $result: append($result, $item);
    }

    @return $result;
}

@function lower($str) {
    @return to-lower-case(toString($str));
}

@function upper($str) {
    @return to-upper-case($str);
}

@function length($str) {
    @return str-length($str);
}

@function color($name) {
    @return map-get($colors, $name);
}

@function miscColor($name) {
    @return map-get($miscColors, $name);
}

@function controlPrefix($name) {
    @return lower(prefix(Controls, $name));
}

@function layoutPrefix($name) {
    @return lower(prefix(Layout, $name));
}

@function miscPrefix($name) {
    @return lower(prefix(Misc, $name));
}

@function prefix($type, $name) {
    $src: null;

    @if ($type == Controls) {
        $src: $controlPrefix;
    }
    @else if ($type == Layout) {
        $src: $layoutPrefix;
    }
    @else if ($type == Misc) {
        $src: $miscPrefix;
    }

    @return map-get($src, $name);
}

@function breakpointWidth($sizeName) {
    @return size(Breakpoint, $sizeName);
}

@function commonMediaSize($sizeName) {
    @return size(CommonMedia, $sizeName);
}

@function defaultMediaSize($sizeName) {
    @return size(BreakpointDefault, $sizeName);
}

@function modalSize($sizeName) {
    @return map-get($modalSizes, $sizeName);
}

@function fontSize($sizeName) {
    @return size(Font, $sizeName);
}

@function iconSize($sizeName) {
    @return size(Icon, $sizeName);
}

@function headerSize($sizeName) {
    @return size(Header, $sizeName);
}

@function position($name) {
    @return map-get($positionValues, $name);
}

@function alignItem($name) {
    @return map-get($alignItemValues, $name);
}

@function margAndPad($name) {
    @return map-get($marginAndPaddingSizes, $name);
}

@function commonControlName($name) {
    @return map-get($commonControlNames, $name);
}

@function size($type, $size) {
    $src: null;

    @if ($type == Breakpoint) {
        $src: $mediaBreakpointSizes;
    }
    @else if ($type == BreakpointDefault) {
        $src: $mediaBreakpointDefaultSizes;
    }
    @else if ($type == CommonMedia) {
        $src: $commonMediaSizes;
    }
    @else if ($type == DefaultMedia) {
        $src: $mediaBreakpointDefaultSizes;
    }
    @else if ($type == Font) {
        $src: $fontSizesMap;
    }
    @else if ($type == Icon) {
        $src: $iconSizes;
    }
    @else if ($type == Header) {
        $src: $headerSizes;
    }

    @return map-get($src, $size);
}