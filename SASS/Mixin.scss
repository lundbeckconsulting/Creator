@import "MapsAndList.scss";
@import "Function.scss";

@mixin modal($size: MD, $cp: Default) {
    $colorLight: color($cp, Fourth);
    $colorDark: color($cp, Primary);
    $colorBack: color($cp, Fifth);

    max-width: getModal($size);
    border: 4px solid $colorDark;
    border-radius: getSys(BorderRadius);
    padding: getPadding();
}

@mixin doc($size: MD) {
    @return getDoc($size);
}

@mixin airy($size: MD, $inside: false) {
    $val: getAiry($size);

    @if ($inside) {
        padding: $val;
    }
    @else {
        margin: $val;
    }
}

@mixin padding($size: MD) {
    $val: getPadding($size);

    padding: $val;
}

@mixin margin($size: MD) {
    $val: getMargin($size);

    margin: $size;
}

@mixin width($size: MD) {
    $val: getWidth($size);

    width: $val;
}

@mixin font($size: MD, $bold: false) {
    $val: getFont($size);

    font-size: $val;

    @if ($bold) {
        font-weight: bold;
    }
}

@mixin responsive($restrain: true, $center: true, $pad: false) {
    width: 100%;
    height: 100%;

    $min: 0px;
    $max: 100%;

    @if ($restrain) {
        $max: getWidth(DOC);
    }

    min-width: $min;
    max-width: $max;

    @if ($center) {
        margin: auto;
    }

    @if ($pad) {
        padding: getPadding(MD);
    }
}

@mixin color($cpName: Default, $clrName: Primary, $font: false, $bg: false) {
    $clr: color($cpName, $clrName);

    @if ($font) {
        color: $clr;
    }
    @else if ($bg) {
        background-color: $clr;
    }
}

@mixin absoluteCenter() {
    left: 50%;
    transform: translate(-50%);
}

@mixin clean($noBorders: false) {
    padding: 0px;
    margin: 0px;

    @if ($noBorders) {
        border: 0px;
    }
}

@mixin marginAuto() {
    margin-left: auto;
    margin-right: auto;
}


@mixin bgCover($fixed: false, $img: None) {
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;

    @if ($fixed) {
        background-attachment: fixed;
    }

    @if not (equal($img, None)) {
        background-image: url($img);
    }
}

@mixin bgRepeat() {
    background-repeat: repeat;
}

@mixin bgRepeatY() {
    background-position-y: left;
    background-position-x: unset;
}

@mixin bgRepeatX() {
    background-position-x: top;
    background-position-y: unset;
}

@mixin fontOutline($size, $color: white, $outlineColor: black) {
    color: $color;
    -webkit-text-stroke-width: $size;
    -webkit-text-stroke-color: $outlineColor;
}

@mixin cleanBase($pad: true, $mrg: true, $border: false) {
    $p: 0px;
    $m: 0px;
    $b: 0px;

    @if ($pad) {
        padding: $p;
    }

    @if ($mrg) {
        margin: $m;
    }

    @if ($border) {
        border: $b;
    }
}

@mixin table($cpName: Default, $mrgAuto: false) {
    display: table;

    @if ($mrgAuto) {
        @include marginAuto();
    }
}

@mixin tableAlternate($cpName: Default) {
    tr:nth-child(even) {
        $clr: color($cpName, Fifth);

        @if (equal($cpName, Light)) {
            $clr: #e8e8e8;
        }

        background-color: $clr;
    }
}

@mixin bgCover($fixed: false, $img: None) {
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;

    @if ($fixed) {
        background-attachment: fixed;
    }

    @if not (equal($img, None)) {
        background-image: url($img);
    }
}

@mixin noOverflow() {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin table($cpName: Default, $border: false, $fixed: false) {
    display: table;
    border-spacing: 0;
    border-collapse: collapse;

    thead {
        padding: 8px;
        background-color: color($cpName, Third);
        font-weight: bold;
        color: color($cpName);
    }

    @if ($fixed) {
        &.#{getKW(Fixed)}, &-#{getKW(Fixed)} {
            position: fixed;
        }
    }

    td {
        $clr: color($cpName);
        padding: 8px;
        color: $clr;

        @if ($border) {
            border-bottom: 4px solid rgba($clr, 0.6);
        }
    }

    td:first-child {
        padding-right: 0;
    }

    &.alternate {
        @include tableAlternate($cpName);
    }

    @include responsive();
}

@mixin tableAlternate($cpName: Default) {
    tr:nth-child(even) {
        $clr: color($cpName, Fifth);

        @if (equal($cpName, Light)) {
            $clr: #e8e8e8;
        }

        background-color: $clr;
    }
}

@mixin formControl($cpName: Default, $border: false, $glowFocus: false, $padHori: 12px) {
    $fore: color($cpName, Fifth);
    $back: color($cpName);
    $borderColor: $back;
    $padVertical: 10px;
    $padHorizontal: $padHori;

    @if (equal($cpName, Default)) {
        $fore: black;
        $back: white;
        $border: true;
        $borderColor: #2a2a2a;
    }
    @else if (equal($cpName, Disabled)) {
        font-style: italic;
    }
    @else if (equal($cpName, Warning)) {
        $back: color($cpName, Primary);
        $fore: darkred;
    }
    @else if (equal($cpName, Dark)) {
        $fore: black;
    }

    color: $fore;
    background-color: $back;
    border-radius: getSys(BorderRadius);
    padding-top: $padVertical;
    padding-bottom: $padVertical;
    padding-left: $padHorizontal;
    padding-right: $padHorizontal;
    font-size: getFont();
    transition: all 0.30s ease-in-out;
    text-decoration: none;

    @if ($border) {
        border: 2px solid darken($borderColor, 18%);
    }
    @else {
        border: 2px solid rgba(white, 0);
    }

    @if ($glowFocus) {
        @include boxGlow($fore);
    }
}

@mixin formControlHover($cpName: Default) {
    &:hover {
        $back: darken(color($cpName), 18%);
        $fore: color($cpName, Fifth);
        $cursor: pointer;

        @if (equal($cpName, Disabled)) {
            $back: color($cpName);
            $cursor: default;
        }
        @else if (equal($cpName, Warning)) {
            $fore: white;
        }
        @else if (equal($cpName, Dark)) {
            $fore: #333333;
        }

        cursor: $cursor;
        color: $fore;
        background-color: $back;
    }
}

@mixin formControlTextbox($cpName: Default, $border: false, $glow: true) {
    $clr: color($cpName);

    @if (equal($cpName, Default)) {
        $border: true;
        $clr: #a5a5a5;
    }

    @include formControl($cpName, $border);

    @if not (equal($cpName, Disabled)) and ($glow) {
        @include boxGlow($cpName);
    }

    @if ($border) {
        @if (equal($cpName, Default)) {
            $clr: #272727;
        }

        border: 2px solid darken($clr, 14%);
    }

    @if not (equal($cpName, Disabled)) {
        $bgColor: lighten($clr, 8%);

        @if (equal($cpName, Default)) {
            $bgColor: #d4d4d4;
        }

        &:hover {
            background-color: $bgColor;
            border: 2px solid lighten($clr, 6%);
        }
    }
    @else {
        &:hover {
            cursor: default;
        }
    }
}

@mixin formControlButton($cpName: Default, $border: false) {
    $mrg: 2px;

    @if (equal($cpName, Default)) {
        $border: true;
    }

    @include formControl($cpName, $border, false, 22px);
    @include formControlHover($cpName);

    margin-left: $mrg;
    margin-right: $mrg;
}

@mixin boxGlow($cpName: Default, $size: 18px, $border: false, $borderCpName: Default) {
    $clr: color($cpName);

    @if (equal($cpName, Default)) {
        $clr: #b9b9b9;
    }

    @if ($border) {
        box-shadow: 0 0 $size color($borderCpName);
        -webkit-box-shadow: 0 0 $size 0 color($borderCpName);
        -moz-box-shadow: 0 0 $size 0 color($borderCpName);
        border: 2px solid color($borderCpName);
    }
    @else {
        border: 2px solid rgba(white, 0);

        &:focus:not(.error) {
            -webkit-transition: all 0.30s ease-in-out;
            -moz-transition: all 0.30s ease-in-out;
            box-shadow: 0 0 $size $clr;
            -webkit-box-shadow: 0 0 $size 0 $clr;
            -moz-box-shadow: 0 0 $size 0 $clr;
            outline: none;
            background-color: lighten($clr, 6%);
        }
    }
}

@mixin textGlow($color, $x: 1px, $y: 1px, $blur: 10px) {
    text-shadow: $x $y $blur $color, $x $y $blur $color;
}

@mixin textOutline($size: 4px, $color: white, $outlineColor: black) {
    color: $color;
    -webkit-text-stroke-width: $size;
    -webkit-text-stroke-color: $outlineColor;
}

@mixin shadow($size: 3px, $color: lighten(color(Default), 28%)) {
    box-shadow: $size $size $color;
}

@mixin rotate($degrees: 90deg) {
    transform: rotate($degrees);
}

@mixin rotate3D($x: 90, $y: 90, $z: 90, $angle: 90deg) {
    transform: rotate3d($x, $y, $z, $angle);
}

@mixin rotateX($angle: 90deg) {
    transform: rotateX($angle);
}

@mixin rotateY($angle: 90deg) {
    transform: rotateY($angle);
}

@mixin rotateZ($angle: 90deg) {
    transform: rotateZ($angle);
}

@mixin scale($x: 4, $y: 4) {
    transform: scale($x, $y);
}

@mixin scaleX($scale: 4) {
    transform: scaleX($scale);
}

@mixin scaleY($scale: 4) {
    transform: scaleY($scale);
}

@mixin skew($x: 90deg, $y: 90deg) {
    transform: skew($x, $y);
}

@mixin skewX($angel: 90deg) {
    transform: skewX($angel);
}

@mixin skewY($angel: 90deg) {
    transform: skewY($angel);
}

@mixin translate($x: 60px, $y: 100px) {
    transform: translate($x, $y);
}

@mixin translateX($val: 60px) {
    transform: translateX($val);
}

@mixin translateY($val: 100px) {
    transform: translateY($val);
}