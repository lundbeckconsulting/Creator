{"version":3,"sources":["TagHelper/Modal.js","Utility.js"],"names":["$","document","ready","CloseModalBackground","fadeOut","remove","DoCloseModal","$modal","removeAttr","trigger","TriggerCloseModal","CloseModal","e","hideBG","currentTarget","closest","CloseAllModals","each","this","click","modalId","data","on","append","fadeIn","attr","animate","scrollTop","keyCode"],"mappings":"AAAAA,EAAEC,UAAUC,MAAM,KAChB,SAASC,IACPH,EAAE,oBAAoBI,QAAQ,OAAQ,WACpCJ,EAAE,oBAAoBK,WAQ1B,SAASC,EAAaC,GACpBP,EAAEO,GAAQC,WAAW,QALvB,SAA2BD,GACzBP,EAAEO,GAAQE,QAAQ,gBAKlBC,CAAkBH,GAGpB,SAASI,EAAWC,EAAGC,GAAS,GAE9BP,EADaN,EAAEY,EAAEE,eAAeC,QAAQ,sBAGpCF,GACFV,IAIJ,SAASa,IACPhB,EAAE,kCAAsCiB,KAAK,WAC3CX,EAAaY,QAGff,IAGFH,EAAE,2BAA2BmB,MAAM,SAASP,GAC1C,IAAIQ,EAAUpB,EAAEkB,MAAMG,KAAK,SAE3BrB,EAAE,IAAMoB,GAASX,QAAQ,gBAG3BT,EAAE,qBAAuBsB,GAAG,aAAc,SAASV,GAEjD,IAAIL,EAASW,KAGblB,EAAE,QAAQuB,OAFA,oCAIVvB,EAAE,oBAAoBwB,OAAO,OAAQ,WACnCxB,EAAEO,GAAQkB,KAAK,OAAQ,QACvBzB,EAAEO,GAAQE,QAAQ,iBAElBT,EAAE,cAAc0B,QAAQ,CACtBC,UAAW,GACV,SAIP3B,EAAE,eAAemB,MAAM,SAASP,GAC9BD,EAAWC,KAGbZ,EAAE,qBAAuBsB,GAAG,aAAc,SAASV,GACjDD,EAAWC,KAGbZ,EAAEC,UAAUqB,GAAG,QAAS,mBAAoB,WAC1CN,MAGFhB,EAAEC,UAAUqB,GAAG,UAAW,SAASV,GACf,KAAdA,EAAEgB,SACJZ,QAMNhB,EAAEC,UAAUC,MAAM","sourcesContent":["$(document).ready(() => {\n    function CloseModalBackground() {\n        $(\"#modalBackground\").fadeOut(\"fast\", function () {\n            $(\"#modalBackground\").remove();\n        });\n    }\n\n    function TriggerCloseModal($modal) {\n        $($modal).trigger(\"modal:hidden\");\n    }\n\n    function DoCloseModal($modal) {\n        $($modal).removeAttr(\"open\");\n        TriggerCloseModal($modal);\n    }\n\n    function CloseModal(e, hideBG = true) {\n        var $modal = $(e.currentTarget).closest(\"[class^=\\\"modal-\\\"]\");\n        DoCloseModal($modal);\n\n        if (hideBG) {\n            CloseModalBackground();\n        }\n    }\n\n    function CloseAllModals() {\n        $(\"[class^=\\\"modal-\\\"][open=\\\"open\\\"]\").each(function () {\n            DoCloseModal(this);\n        });\n\n        CloseModalBackground();\n    }\n\n    $(\".show-modal[data-modal]\").click(function (e) {\n        var modalId = $(this).data(\"modal\");\n\n        $(\"#\" + modalId).trigger(\"modal:show\");\n    });\n\n    $(\"[class^=\\\"modal-\\\"]\").on(\"modal:show\", function (e) {\n        // eslint-disable-next-line consistent-this\n        var $modal = this;\n        var $bg = \"<div id=\\\"modalBackground\\\"></div>\";\n\n        $(\"body\").append($bg);\n\n        $(\"#modalBackground\").fadeIn(\"slow\", function () {\n            $($modal).attr(\"open\", \"open\");\n            $($modal).trigger(\"modal:visible\");\n\n            $(\"html, body\").animate({\n                scrollTop: 0\n            }, 600);\n        });\n    });\n\n    $(\".hide-modal\").click(function (e) {\n        CloseModal(e);\n    });\n\n    $(\"[class^=\\\"modal-\\\"]\").on(\"modal:hide\", function (e) {\n        CloseModal(e);\n    });\n\n    $(document).on(\"click\", \"#modalBackground\", function () {\n        CloseAllModals();\n    });\n\n    $(document).on(\"keydown\", function (e) {\n        if (e.keyCode === 27) {\n            CloseAllModals();\n        }\n    });\n});","$(document).ready(() => {\r\n    const LogTypes = {\r\n        Default: \"DEFAULT\",\r\n        Info: \"INFO\",\r\n        Warn: \"WARN\",\r\n        Error: \"ERROR\",\r\n        Table: \"TABLE\",\r\n    };\r\n\r\n    const DateTypes = {\r\n        Current: \"CURRENT\",\r\n        Log: \"LOG\",\r\n        Short: \"SHORT\",\r\n        Long: \"LONG\",\r\n    };\r\n\r\n    const dates = (type = DateTypes.Short) => {\r\n        var result = Empty;\r\n        const current = new Date();\r\n\r\n        if (equal(type, DateTypes.Current)) {\r\n            result = current;\r\n        } else if (equal(type, DateTypes.Log)) {\r\n            result = \"[\" + current.getUTCHours() + \":\" + current.getUTCMinutes() + \".\" + current.getUTCSeconds() + \".\" + current.getUTCMilliseconds() + \" - \" + current.getUTCDay() + \".\" + current.getUTCMonth() + \".\" + current.getUTCFullYear() + \"]\";\r\n        } else if (equal(type, DateTypes.Short)) {\r\n            result = current.getUTCDay() + \".\" + current.getUTCMonth() + \".\" + current.getUTCFullYear();\r\n        } else if (equal(type, DateTypes.Long)) {\r\n            result = dates(DateTypes.Short) + \" \" + current.getUTCHours() + \":\" + current.getUTCMinutes() + \".\" + current.getUTCSeconds();\r\n        }\r\n\r\n        return result;\r\n    };\r\n    const doLog = (type = LogTypes.Default, entry = EmptyString) => {\r\n        if (equal(type, LogTypes.Default)) {\r\n            console.log(dates(DateTypes.Log), entry);\r\n        } else if (equal(type, LogTypes.Info)) {\r\n            console.info(dates(DateTypes.Log), entry);\r\n        } else if (equal(type, LogTypes.Warn)) {\r\n            console.warn(dates(DateTypes.Log), entry);\r\n        } else if (equal(type, LogTypes.Error)) {\r\n            console.error(dates(DateTypes.Log), entry);\r\n        } else if (equal(type, LogTypes.Table)) {\r\n            console.table(dates(DateTypes.Log), entry);\r\n        }\r\n    };\r\n    const LOG = (entry = EmptyString) => doLog(LogTypes.Default, entry);\r\n    const INFO = (entry = EmptyString) => doLog(LogTypes.Info, entry);\r\n    const WARN = (entry = EmptyString) => doLog(LogTypes.Warn, entry);\r\n    const ERROR = (entry = EmptyString) => doLog(LogTypes.Error, entry);\r\n    const TABLE = (entry = EmptyString) => doLog(LogTypes.Table, entry);\r\n    const trim = (str = EmptyString) => str.trimStart().trimEnd();\r\n    const isNull = (obj = Empty) => typeof obj === \"object\" || typeof obj === \"undefined\";\r\n    const isJSON = (obj = Empty) => {\r\n        var result = EmptyBoolTrue;\r\n\r\n        try {\r\n            JSON.parse(obj);\r\n        } catch (e) {\r\n            result = false;\r\n        }\r\n\r\n        return result;\r\n    };\r\n    const isString = (val = Empty) => typeof val === \"string\";\r\n    const isNumeric = (val = Empty) => typeof val === \"number\";\r\n    const isNegative = (sum = EmptyNumber) => isNumeric(sum) && sum < 0;\r\n    const isPositive = (sum = EmptyNumber) => isNumeric(sum) && !isNegative(sum);\r\n    const isChar = (val = Empty) => isString(val) && val.length === 1;\r\n    const isBool = (val = EmptyBool) => typeof val === \"boolean\";\r\n    const isFunction = (val = Empty) => typeof val === \"function\";\r\n    const isObject = (val = Empty) => typeof val === \"object\";\r\n    const upper = (str = EmptyString) => str.toUpperCase();\r\n    const lower = (str = EmptyString) => str.toLowerCase();\r\n    const upperLocale = (str = EmptyString) => str.toLocaleUpperCase();\r\n    const lowerLocale = (str = EmptyString) => str.toLocaleLowerCase();\r\n    const equals = (val = Empty, ...compares) => {\r\n        var result = EmptyBool;\r\n\r\n        compares.map(compare => {\r\n            if (isString(val)) {\r\n                if (upper(val) === upper(compare)) {\r\n                    result = true;\r\n                }\r\n            } else {\r\n                if (val === compare) {\r\n                    result = true;\r\n                }\r\n            }\r\n        });\r\n\r\n        return result;\r\n    };\r\n    const equal = (val = Empty, compare) => equals(val, compare);\r\n    const capitalize = (str = EmptyString) => str.charAt(0).toUpperCase() + str.slice(1);\r\n    const camelCase = (str = EmptyString) => {\r\n        var result = EmptyString;\r\n        var count = EmptyCount;\r\n\r\n        for (var s of str.split(\" \")) {\r\n            if (count > 0) {\r\n                result += \" \";\r\n            }\r\n\r\n            result += capitalize(s);\r\n\r\n            count++;\r\n        }\r\n\r\n        return result;\r\n    };\r\n    const camelCaseCombined = (str = EmptyString) => camelCase(str).replace(\" \", \"\");\r\n    const commaListToArray = (list = EmptyString, trimElement = EmptyBoolTrue) => {\r\n        var result = EmptyStringArray;\r\n\r\n        for (var str of list.split(\",\")) {\r\n            const tmp = trimElement ? trim(str) : str;\r\n            result.push(tmp);\r\n        }\r\n\r\n        return result;\r\n    };\r\n    const arrayToCommaList = (arr = EmptyStringArray) => {\r\n        var result = EmptyString;\r\n        var count = EmptyCount;\r\n\r\n        for (var o of arr) {\r\n            if (count > 0) {\r\n                result += \", \";\r\n            }\r\n\r\n            result += o.toString();\r\n\r\n            count++;\r\n        }\r\n\r\n        return result;\r\n    };\r\n    const Empty = null;\r\n    const EmptyUndefined = undefined;\r\n    const EmptyString = \"\";\r\n    const EmptyNumber = -1;\r\n    const EmptyArray = [];\r\n    const EmptyStringArray = [EmptyString];\r\n    const EmptyNumberArray = [EmptyNumber];\r\n    const EmptyJSON = {};\r\n    const EmptyJSONArray = [{}];\r\n    const EmptyBool = false;\r\n    const EmptyBoolTrue = !EmptyBool;\r\n    const EmptyCount = 0;\r\n});"],"file":"Creator.min.js"}