{"version":3,"file":"TagHelper.Icon.css","sources":["TagHelper.Icon.scss","TagHelper/_Icon.scss","_Shared/_Config.scss","_Shared/_ColorProfiles.scss","_Shared/_Function.scss"],"sourcesContent":["@import \"TagHelper//_Icon\"","﻿@import \"..\\\\_Shared\\\\Config\";\r\n@import \"..\\\\_Shared\\\\Function\";\r\n\r\n.creator.icon {\r\n    &.clickable {\r\n        &:hover {\r\n            cursor: pointer;\r\n        }\r\n    }\r\n\r\n    & > .wrap {\r\n        & > .label {\r\n            margin-left: 6px;\r\n        }\r\n\r\n        @each $name, $val in $CPs {\r\n            &-#{lower($name)} {\r\n                color: color($name, Primary);\r\n            }\r\n        }\r\n    }\r\n}","﻿@import \"ColorProfiles\";\r\n\r\n$mediaBreakpoints: (XS: 0px, SM: 576px, MD: 768px, LG: 992px, XL: 1200px);\r\n$mediaOrientation: (0: Any, 1: Portrait, 2: Landscape);\r\n$marginValues: (XS: 4px, SM: 18px, MD: 28px, LG: 42px, XL: 60px, XXL: 82px, Auto: null);\r\n$docValues: (XS: 298px, SM: 444px, MD: 598px, LG: 878px, XL: 1366px);\r\n$padValues: (XXS: 2px, XS: 4px, SM: 10px, MD: 16px, LG: 30px, XL: 54px, XXL: 72px);\r\n$airyValues: (XS: 4px, SM: 8px, MD: 16px, LG: 28px, XL: 44px, XXL: 62px);\r\n$defaultDirections: (Left, Top, Right, Bottom);\r\n$padDirections: append($defaultDirections, \"LeftRight, TopBottom\", comma);\r\n$widthSizes: (XXS: 26px, XS: 64px, SM: 104px, MD: 232px, LG: 514px, XL: 788px, XXL: 974px, DOC: map-get($docValues, XL));\r\n$headSizes: (XXS: 1.1rem, XS: 1.4rem, SM: 1.8rem, MD: 2.2rem, LG: 3rem, XL: 4.3rem, XXL: 5.2rem);\r\n$headSyno: (1: XXL, 2: XL, 3: LG, 4: MD, 5: SM, 6: XS, 7: XXS);\r\n$fontSizes: (1: 0.8rem, 2: 1.4rem, 3: 1.8rem, 4: 2.5rem, 5: 2.9rem, 6: 3.2rem, 7: 3.8rem, 8: 4.2rem, 9: 4.6rem, 10: 5.2rem);\r\n$modalSizes: (SM: 384px, MD: 522px, LG: 734px, XL: 998px);\r\n$commonSizes: (XS, SM, MD, LG, XL);\r\n$commonSizesExtended: (XXS, XS, SM, MD, LG, XL, XXL);\r\n$flexAlignItems: (Base: baseline, Center: center, End: flex-end, Start: flex-start, Stretch: stretch);\r\n$flexJustifyItems: (Center: center, End: flex-end, Start: flex-start, Around: space-around, Between: space-between);\r\n$gridItemSizes: (XS: 8px, SM: 60px, MD: 144px, LG: 366px, XL: 536px, XXL: 768px);\r\n$gridGapSizes: (XS: 2px, SM: 4px, MD: 8px, LG: 16px, XL: 30px, XXL: 1fr);\r\n\r\n$keywords: (\r\n    BG-Cover: bg-cover, \r\n    BG-Repeat-X: bg-repeat-x, \r\n    BG-Repeat-Y: bg-repeat-y, \r\n    BG-NoRepeat: bg-norepeat, \r\n    Font: f, \r\n    Head: h, \r\n    Col: col-, \r\n    Responsive: r, \r\n    Image: img, \r\n    Button: btn, \r\n    AlignVertical: align-vertical, \r\n    TextBox: txt, \r\n    Textarea: txt-area, \r\n    ValidateError: validate-error, \r\n    ValidatedForm: form-validated, \r\n    WhiteSpace: ws);\r\n\r\n$systemValues: (\r\n    BorderRadius: 6px, \r\n    PadBase: map-get($padValues, MD), \r\n    Margin: map-get($marginValues, MD), \r\n    Font: map-get($fontSizes, 3), \r\n    Width: map-get($docValues, MD), \r\n    BorderWidth: 6px, \r\n    ModalBackgroundColor: white);\r\n\r\n$contentMaxWidth: map-get($widthSizes, DOC);\r\n$defaultPad: map-get($padValues, MD);\r\n$defaultMargin: 12px;\r\n\r\n$mapIndex: (\r\n    Pad: (Data: $padValues),\r\n    Width: (Data: $widthSizes),\r\n    Media: (Data: $mediaBreakpoints), \r\n    MediaOrientation: (Data: $mediaOrientation), \r\n    Margin: (Data: $marginValues), \r\n    CP: (Data: $CPs), \r\n    Modal: (Data: $modalSizes), \r\n    Sys: (Data: $systemValues), \r\n    PadDirection: (Data: $padDirections), \r\n    Keyword: (Data: $keywords), \r\n    KW: (Data: $keywords), \r\n    FontSize: (Data: $fontSizes), \r\n    Doc: (Data: $docValues), \r\n    Airy: (Data: $airyValues), \r\n    Head: (Data: $headSizes), \r\n    FlexAlign: (Data: $flexAlignItems), \r\n    FlexJustify: (Data: $flexJustifyItems), \r\n    Grid: (Data: $gridItemSizes), \r\n    GridGap: (Data: $gridGapSizes), \r\n    Common: (Data: $commonSizes), \r\n    SizeExtended: (Data: $commonSizesExtended));\r\n\t","$cpDefault: (Primary: black, Second: #303030, Third: #484848, Fourth: #a1a1a1, Fifth: #ececec);\r\n$cpPrimary: (Primary: #8b480e, Second: #b06c31, Third: #cc8c55, Fourth: #d8a77d, Fifth: #efdbc9);\r\n$cpSuccess: (Primary: #195f34, Second: #238649, Third: #2eac5e, Fourth: #4bcc7c, Fifth: #a0edbd);\r\n$cpDanger: (Primary: #8c101b, Second: #a12d37, Third: #ca5660, Fourth: #ed7781, Fifth: #ffcacf);\r\n$cpWarning: (Primary: #ffbf00, Second: #ffd24a, Third: #ffde7b, Fourth: #ffe9a6, Fifth: #fff2cb);\r\n$cpInfo: (Primary: #2894aa, Second: #46a3b6, Third: #68b7c7, Fourth: #8bc8d4, Fifth: #c4e7ee);\r\n$cpLight: (Primary: #a19b9b, Second: #bbb3b3, Third: #dbd4d4, Fourth: #eae2e2, Fifth: #f7f2f2);\r\n$cpDark: (Primary: #161616, Second: #2c2c2c, Third: #3c3c3c, Fourth: #606060, Fifth: #c3c3c3);\r\n$cpAntan: (Primary: #fe2f00, Second: #c44b30, Third: #c66b57, Fourth: #a76e62, Fifth: #e8bdb4);\r\n$cpNotify: (Primary: #07294e, Second: #1c436d, Third: #466a92, Fourth: #7b9abd, Fifth: #c1cfde);\r\n\r\n$CPs: (Default: $cpDefault, Primary: $cpPrimary, Success: $cpSuccess, Danger: $cpDanger, Warning: $cpWarning, Info: $cpInfo, Light: $cpLight, Dark: $cpDark, Antan: $cpAntan, Notify: $cpNotify);","﻿@function color($profileName: Default, $color: Primary) {\r\n    $result: null;\r\n    $profileName: toCPName($profileName);\r\n    $color: toCPColorName($color);\r\n\r\n    @if (map-has-key($CPs, $profileName)) {\r\n        $tmp: map-get($CPs, $profileName);\r\n\r\n        @if (map-has-key($tmp, $color)) {\r\n            $result: map-get($tmp, $color);\r\n        }\r\n        @else {\r\n            @error \"Can't find color with name \\\"#{$color}\\\"\";\r\n        }\r\n    }\r\n    @else {\r\n        @error \"Can't find Color Profile with name \\\"#{$name}\\\"\";\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function mapExists($mapName: Modal) {\r\n    @return map-has-key($mapIndex, toMapName($mapName));\r\n}\r\n\r\n@function GET($mapName: Sys, $key: null) {\r\n    $result: null;\r\n    $mapName: toMapName($mapName);\r\n\r\n    @if (map-has-key($mapIndex, $mapName)) {\r\n        $tmp: map-get($mapIndex, $mapName);\r\n\r\n        @if ($key) {\r\n            $result: map-get(map-get($tmp, Data), $key);\r\n        }\r\n        @else {\r\n            $result: $tmp;\r\n        }\r\n    }\r\n    @else {\r\n        //test ds  \r\n\r\n        @error \"Map with name \\\"#{$name}\\\" doesn't exist\";\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function upper($str) {\r\n    @return to-upper-case(toString($str));\r\n}\r\n\r\n@function lower($str) {\r\n    @return to-lower-case(toString($str));\r\n}\r\n\r\n@function toString($str) {\r\n    @return inspect($str);\r\n}\r\n\r\n@function toBoolean($value) {\r\n    @return equalz($value, true, false);\r\n}\r\n\r\n@function equal($base, $val) {\r\n    @return equalz($base, $val);\r\n}\r\n\r\n@function equalz($base, $vals...) {\r\n    $result: false;\r\n\r\n    @each $v in $vals {\r\n        @if (upper($base) == upper($v)) {\r\n            $result: true;\r\n        }\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function isNull($obj) {\r\n    $result: true;\r\n    $length: length($obj);\r\n\r\n    @if (isMap($obj)) and ($length > 0) {\r\n        $result: false;\r\n    }\r\n    @else if (isList($obj)) and ($length > 0) {\r\n        $result: false;\r\n    }\r\n    @else if (isString($obj)) and (str-length($obj) > 0) {\r\n        $result: false;\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function isMap($map) {\r\n    @return type-of($map) == 'map';\r\n}\r\n\r\n@function isList($list) {\r\n    @return type-of($list) == 'list';\r\n}\r\n\r\n@function isString($str) {\r\n    @return type-of($str) == 'string';\r\n}\r\n\r\n@function isCollection($coll) {\r\n    $result: false;\r\n\r\n    @if (isMap($coll)) or (isList($coll)) {\r\n        $result: true;\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function isNumber($value) {\r\n    @return type-of($value) == \"number\";\r\n}\r\n\r\n@function isInt($value) {\r\n    @return isNumber($value) and round($value) == $value;\r\n}\r\n\r\n@function isBool($value) {\r\n    $result: type-of($value) == \"boolean\";\r\n    \r\n    @if not ($result) {\r\n        @if (equalz($value, \"true\", \"false\")) {\r\n            $result: true;\r\n        }\r\n    }\r\n    \r\n    @return $result;\r\n}\r\n\r\n@function len($obj) {\r\n    @return length($obj);\r\n}\r\n\r\n@function toCamelCase($str) {\r\n    $progress: $str;\r\n    $result: null;\r\n    $running: true;\r\n\r\n    @while $running {\r\n        $index: str-index($progress, \" \");\r\n\r\n        @if $index {\r\n            $result: $result + toCapitalize(str-slice($progress, 1, $index));\r\n            $progress: str-slice($progress, ($index + 1));\r\n        }\r\n        @else {\r\n            $running: false;\r\n        }\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function toCapitalize($str) {\r\n    @return upper(str-slice($str, 1, 1)) + str-slice($str, 2);\r\n}\r\n\r\n@function listContains($list, $key) {\r\n    @return (false == index($list, $key));\r\n}\r\n\r\n@function toMapName($name) {\r\n    $result: null;\r\n\r\n    @each $n, $v in $mapIndex {\r\n        @if (equal($name, $n)) {\r\n            $result: $n;\r\n        }\r\n    }\r\n\r\n    @if not ($result) {\r\n        @error \"Can't find map with name \\\"#{$name}\\\"\";\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function toCPName($name) {\r\n    $result: null;\r\n\r\n    @each $n, $v in $CPs {\r\n        @if (equal($name, $n)) {\r\n            $result: $n;\r\n        }\r\n    }\r\n\r\n    @if not ($result) {\r\n        @error \"Can't find Color Profile with name \\\"#{$name}\\\"\";\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function toCPColorName($name) {\r\n    $result: null;\r\n\r\n    @each $val, $color in $cpDefault {\r\n        @if (equal($name, $val)) {\r\n            $result: $val;\r\n        }\r\n    }\r\n\r\n    @if not ($result) {\r\n        @error \"Can't find Color Profile Color with name \\\"#{$name}\\\"\";\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function upper($str) {\r\n    @return to-upper-case(toString($str));\r\n}\r\n\r\n@function lower($str) {\r\n    @return to-lower-case(toString($str));\r\n}\r\n\r\n@function toString($str) {\r\n    @return inspect($str);\r\n}\r\n\r\n@function toBoolean($value) {\r\n    @return equalz($value, true, false);\r\n}\r\n\r\n@function equal($base, $val) {\r\n    @return equalz($base, $val);\r\n}\r\n\r\n@function equalz($base, $vals...) {\r\n    $result: false;\r\n\r\n    @each $v in $vals {\r\n        @if (upper($base) == upper($v)) {\r\n            $result: true;\r\n        }\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function isNull($obj) {\r\n    $result: true;\r\n    $length: length($obj);\r\n\r\n    @if (isMap($obj)) and ($length > 0) {\r\n        $result: false;\r\n    }\r\n    @else if (isList($obj)) and ($length > 0) {\r\n        $result: false;\r\n    }\r\n    @else if (isString($obj)) and (str-length($obj) > 0) {\r\n        $result: false;\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function isMap($map) {\r\n    @return type-of($map) == 'map';\r\n}\r\n\r\n@function isList($list) {\r\n    @return type-of($list) == 'list';\r\n}\r\n\r\n@function isString($str) {\r\n    @return type-of($str) == 'string';\r\n}\r\n\r\n@function isCollection($coll) {\r\n    $result: false;\r\n\r\n    @if (isMap($coll)) or (isList($coll)) {\r\n        $result: true;\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function isNumber($value) {\r\n    @return type-of($value) == \"number\";\r\n}\r\n\r\n@function isInt($value) {\r\n    @return isNumber($value) and round($value) == $value;\r\n}\r\n\r\n@function isBool($value) {\r\n    $result: type-of($value) == \"boolean\";\r\n    \r\n    @if not ($result) {\r\n        @if (equalz($value, \"true\", \"false\")) {\r\n            $result: true;\r\n        }\r\n    }\r\n    \r\n    @return $result;\r\n}\r\n\r\n@function len($obj) {\r\n    @return length($obj);\r\n}\r\n\r\n@function toCamelCase($str) {\r\n    $progress: $str;\r\n    $result: null;\r\n    $running: true;\r\n\r\n    @while $running {\r\n        $index: str-index($progress, \" \");\r\n\r\n        @if $index {\r\n            $result: $result + toCapitalize(str-slice($progress, 1, $index));\r\n            $progress: str-slice($progress, ($index + 1));\r\n        }\r\n        @else {\r\n            $running: false;\r\n        }\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function toCapitalize($str) {\r\n    @return upper(str-slice($str, 1, 1)) + str-slice($str, 2);\r\n}\r\n\r\n@function listContains($list, $key) {\r\n    @return (false == index($list, $key));\r\n}\r\n\r\n@function toMapName($name) {\r\n    $result: null;\r\n\r\n    @each $n, $v in $mapIndex {\r\n        @if (equal($name, $n)) {\r\n            $result: $n;\r\n        }\r\n    }\r\n\r\n    @if not ($result) {\r\n        @error \"Can't find map with name \\\"#{$name}\\\"\";\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function toCPName($name) {\r\n    $result: null;\r\n\r\n    @each $n, $v in $CPs {\r\n        @if (equal($name, $n)) {\r\n            $result: $n;\r\n        }\r\n    }\r\n\r\n    @if not ($result) {\r\n        @error \"Can't find Color Profile with name \\\"#{$name}\\\"\";\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function toCPColorName($name) {\r\n    $result: null;\r\n\r\n    @each $val, $color in $cpDefault {\r\n        @if (equal($name, $val)) {\r\n            $result: $val;\r\n        }\r\n    }\r\n\r\n    @if not ($result) {\r\n        @error \"Can't find Color Profile Color with name \\\"#{$name}\\\"\";\r\n    }\r\n\r\n    @return $result;\r\n}"],"names":[],"mappings":"ACGA,AAEQ,QAFA,AAAA,KAAK,AACR,UAAU,AACN,MAAM,CAAC;EACJ,MAAM,EAAE,OAAO,GAClB;;AAJT,AAQQ,QARA,AAAA,KAAK,GAOL,KAAK,GACD,MAAM,CAAC;EACP,WAAW,EAAE,GAAG,GACnB;;AAVT,AAaY,QAbJ,AAAA,KAAK,GAaA,aAAQ,CAAS;EACd,KAAK,EEjBC,KAAK,GFkBd;;AAfb,AAaY,QAbJ,AAAA,KAAK,GAaA,aAAQ,CAAS;EACd,KAAK,EEhBC,OAAO,GFiBhB;;AAfb,AAaY,QAbJ,AAAA,KAAK,GAaA,aAAQ,CAAS;EACd,KAAK,EEfC,OAAO,GFgBhB;;AAfb,AAaY,QAbJ,AAAA,KAAK,GAaA,YAAO,CAAU;EACd,KAAK,EEdA,OAAO,GFef;;AAfb,AAaY,QAbJ,AAAA,KAAK,GAaA,aAAQ,CAAS;EACd,KAAK,EEbC,OAAO,GFchB;;AAfb,AAaY,QAbJ,AAAA,KAAK,GAaA,UAAK,CAAY;EACd,KAAK,EEZF,OAAO,GFab;;AAfb,AAaY,QAbJ,AAAA,KAAK,GAaA,WAAM,CAAW;EACd,KAAK,EEXD,OAAO,GFYd;;AAfb,AAaY,QAbJ,AAAA,KAAK,GAaA,UAAK,CAAY;EACd,KAAK,EEVF,OAAO,GFWb;;AAfb,AAaY,QAbJ,AAAA,KAAK,GAaA,WAAM,CAAW;EACd,KAAK,EETD,OAAO,GFUd;;AAfb,AAaY,QAbJ,AAAA,KAAK,GAaA,YAAO,CAAU;EACd,KAAK,EERA,OAAO,GFSf"}