{"version":3,"sources":["Layout/_Flex.scss","Layout/_Mixin.scss","Shared/_Function.scss"],"names":[],"mappings":"AAIA,MACE,QAAS,KAET,WACE,QAAS,KACT,UAAW,KAGb,cACE,QAAS,KACT,UAAW,OAGb,cACE,QAAS,KACT,UAAW,aAGb,WACE,QAAS,KCnBX,gBAAiB,aACjB,YAAa,QACb,cAAe,ODgBd,aCbC,KAAM,EAAA,EAAA,KDiCN,aACE,QAAS,KACT,gBEgGI,OF7FF,kBACE,QAAS,KACT,gBE2FA,OF1FA,YE0FA,SF7FF,oBACE,QAAS,KACT,gBE2FA,OF1FA,YE0FA,OF7FF,iBACE,QAAS,KACT,gBE2FA,OF1FA,YE0FA,SF7FF,mBACE,QAAS,KACT,gBE2FA,OF1FA,YE0FA,WF7FF,qBACE,QAAS,KACT,gBE2FA,OF1FA,YE0FA,QFlGN,UACE,QAAS,KACT,gBEgGI,SF7FF,eACE,QAAS,KACT,gBE2FA,SF1FA,YE0FA,SF7FF,iBACE,QAAS,KACT,gBE2FA,SF1FA,YE0FA,OF7FF,cACE,QAAS,KACT,gBE2FA,SF1FA,YE0FA,SF7FF,gBACE,QAAS,KACT,gBE2FA,SF1FA,YE0FA,WF7FF,kBACE,QAAS,KACT,gBE2FA,SF1FA,YE0FA,QFlGN,YACE,QAAS,KACT,gBEgGI,WF7FF,iBACE,QAAS,KACT,gBE2FA,WF1FA,YE0FA,SF7FF,mBACE,QAAS,KACT,gBE2FA,WF1FA,YE0FA,OF7FF,gBACE,QAAS,KACT,gBE2FA,WF1FA,YE0FA,SF7FF,kBACE,QAAS,KACT,gBE2FA,WF1FA,YE0FA,WF7FF,oBACE,QAAS,KACT,gBE2FA,WF1FA,YE0FA,QFlGN,aACE,QAAS,KACT,gBEgGI,aF7FF,kBACE,QAAS,KACT,gBE2FA,aF1FA,YE0FA,SF7FF,oBACE,QAAS,KACT,gBE2FA,aF1FA,YE0FA,OF7FF,iBACE,QAAS,KACT,gBE2FA,aF1FA,YE0FA,SF7FF,mBACE,QAAS,KACT,gBE2FA,aF1FA,YE0FA,WF7FF,qBACE,QAAS,KACT,gBE2FA,aF1FA,YE0FA,QFlGN,cACE,QAAS,KACT,gBEgGI,cF7FF,mBACE,QAAS,KACT,gBE2FA,cF1FA,YE0FA,SF7FF,qBACE,QAAS,KACT,gBE2FA,cF1FA,YE0FA,OF7FF,kBACE,QAAS,KACT,gBE2FA,cF1FA,YE0FA,SF7FF,oBACE,QAAS,KACT,gBE2FA,cF1FA,YE0FA,WF7FF,sBACE,QAAS,KACT,gBE2FA,cF1FA,YE0FA","file":"Layout.Flex.min.css","sourcesContent":["@import \"..\\\\Shared\\\\Config\";\r\n@import \"..\\\\Shared\\\\Function\";\r\n@import \"Mixin\";\r\n\r\n.flex {\r\n  display: flex;\r\n\r\n  &-wrap {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n\r\n  &-no-wrap {\r\n    display: flex;\r\n    flex-wrap: nowrap;\r\n  }\r\n\r\n  &-reverse {\r\n    display: flex;\r\n    flex-wrap: wrap-reverse;\r\n  }\r\n\r\n  &-even {\r\n    display: flex;\r\n\r\n    @include flexEven();\r\n  }\r\n\r\n  @each $show, $full in $flexJustifyItems {\r\n    $just: $show;\r\n    $tag: $show;\r\n\r\n    @if (equalz($just, start, end)) {\r\n      $just: $full;\r\n    }\r\n\r\n    @if (equal($just, around)) {\r\n      $just: space-around;\r\n    } @else if (equal($just, between)) {\r\n      $just: space-between;\r\n    }\r\n\r\n    &-#{lower($tag)} {\r\n      display: flex;\r\n      justify-content: lower($just);\r\n\r\n      @each $alignName, $alignVal in $flexAlignItems {\r\n        &-#{lower($alignName)} {\r\n          display: flex;\r\n          justify-content: lower($just);\r\n          align-items: lower($alignVal);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","@import \"..\\\\Shared\\\\Function\";\r\n@import \"..\\\\Shared\\\\Config\";\r\n\r\n@mixin flexEven() {\r\n  justify-content: space-around;\r\n  align-items: stretch;\r\n  align-content: center;\r\n\r\n  & > * {\r\n    flex: 1 1 auto;\r\n  }\r\n}\r\n\r\n@mixin head($resize: false) {\r\n  @each $name, $val in $headSyno {\r\n    $size: get(Head, $val);\r\n\r\n    @if ($resize) {\r\n      @if (equal($name, 1)) {\r\n        $size: $size - 3.4rem;\r\n      } @else if (equal($name, 2)) {\r\n        $size: $size - 1.2rem;\r\n      } @else if (equal($name, 3)) {\r\n        $size: $size - 1.2rem;\r\n      } @else if (equal($name, 4)) {\r\n        $size: $size - 0.4rem;\r\n      } @else if (equal($name, 5)) {\r\n        $size: $size - 0.2rem;\r\n      }\r\n    }\r\n\r\n    .h#{$name} {\r\n      font-size: $size;\r\n      font-weight: normal;\r\n\r\n      &-bold {\r\n        font-size: $size;\r\n        font-weight: bold;\r\n      }\r\n\r\n      @each $s, $v in $airyValues {\r\n        &-#{\"airy-\" + lower($s)} {\r\n          font-size: $size;\r\n          margin: $v;\r\n          font-weight: normal;\r\n        }\r\n\r\n        &-#{\"airy-\" + lower($s) + \"-bold\"} {\r\n          font-size: $size;\r\n          margin: $v;\r\n          font-weight: bold;\r\n        }\r\n\r\n        @if (equal($s, MD)) {\r\n          &-airy {\r\n            font-size: $size;\r\n            margin: getAiry();\r\n            font-weight: normal;\r\n\r\n            &-bold {\r\n              font-size: $size;\r\n              margin: getAiry();\r\n              font-weight: bold;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@mixin EachDevice($index, $inline: false) {\r\n  $tag: null;\r\n\r\n  @each $nm, $vl in $deviceMediaBreakpoints {\r\n    $i: IndexOf(DeviceMedia, $nm);\r\n\r\n    @if ($index > $i) {\r\n      @if (isNull($tag)) {\r\n        $tag: &-#{lower($nm)};\r\n      } @else {\r\n        $tag: $tag + \"-\" + #{lower($nm)};\r\n      }\r\n\r\n      .#{$tag} {\r\n        display: block;\r\n      }\r\n\r\n      .#{$tag}-inline {\r\n        display: inline-block;\r\n      }\r\n    }\r\n  }\r\n}\r\n","@function color($profileName: Default, $color: Primary) {\r\n  $result: null;\r\n  $profileName: toCPName($profileName);\r\n  $color: toCPColorName($color);\r\n\r\n  @if (map-has-key($CPs, $profileName)) {\r\n    $tmp: map-get($CPs, $profileName);\r\n\r\n    @if (map-has-key($tmp, $color)) {\r\n      $result: map-get($tmp, $color);\r\n    } @else {\r\n      @error \"Can't find color with name \\\"#{$color}\\\"\";\r\n    }\r\n  } @else {\r\n    @error \"Can't find Color Profile with name \\\"#{$name}\\\"\";\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function mapExists($mapName, $throwError: false) {\r\n  $result: map-has-key($mapIndex, toMapName($mapName));\r\n\r\n  @if not($result) and ($throwError) {\r\n    @error \"Can't find map named \\\"#{mapName}\\\" in MapIndex\";\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function keyExists($mapName, $key, $throwError: false) {\r\n  $result: false;\r\n\r\n  @if (mapExists($mapName, true)) {\r\n    $map: get($mapName);\r\n    $result: map-has-key($map, $key);\r\n\r\n    @if not($result) and ($throwError) {\r\n      @error \"Key \\\"#{$key}\\\" doesn't exist in map \\\"#{mapName}\\\"\";\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function get($mapName: Sys, $key: null) {\r\n  $result: null;\r\n  $mapName: toMapName($mapName);\r\n\r\n  @if (mapExists($mapName, true)) {\r\n    $map: map-get(map-get($mapIndex, $mapName), Data);\r\n\r\n    @if ($key) {\r\n      @if not(isNumeric($key)) {\r\n        @if (map-has-key($map, $key)) {\r\n          $result: map-get($map, $key);\r\n        } @else {\r\n          @error \"Can't find key \\\"#{$key}\\\" in map \\\"#{$mapName}\\\"\";\r\n        }\r\n      } @else {\r\n        $i: 1;\r\n\r\n        @each $k, $v in $map {\r\n          @if (equal($i, $key)) {\r\n            $result: $v;\r\n          }\r\n\r\n          $i: $i + 1;\r\n        }\r\n\r\n        @if not($result) {\r\n          @error \"Can't find element with index #{$key} in map \\\"#{$mapName}\\\"\";\r\n        }\r\n      }\r\n    } @else {\r\n      $result: $map;\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function getByCollection($coll, $key) {\r\n  $result: null;\r\n\r\n  @if (isCollection($coll)) {\r\n    @if (isNumeric(($key))) {\r\n      @if (isList($coll)) {\r\n        $result: nth($coll, $key);\r\n      } @else if (isMap($coll) and (map-has-key($coll, $key))) {\r\n        $i: 1;\r\n\r\n        @each $nm, $vl in $coll {\r\n          @if (equal($i, $key)) {\r\n            $result: $vl;\r\n          }\r\n\r\n          $i: $i + 1;\r\n        }\r\n      }\r\n    } @else {\r\n      @if (isList($coll)) {\r\n        $result: index($coll, $key);\r\n      } @else if (isMap($coll) and (map-has-key($coll, $key))) {\r\n        $result: map-get($coll, $key);\r\n      }\r\n    }\r\n  } @else {\r\n    @error \"$map must be of type Map or List\";\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function getByIndex($mapName, $index) {\r\n  $result: null;\r\n  $i: 1;\r\n  $map: get($mapName);\r\n\r\n  @each $key, $val in $map {\r\n    @if (equal($index, $i)) {\r\n      $result: $val;\r\n    }\r\n\r\n    $i: $i + 1;\r\n\r\n    @if ($i > length($map)) {\r\n      @error \"No element with index #{$index} in map \\\"#{$mapName}\\\"\";\r\n      $run: false;\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function upper($str) {\r\n  @return to-upper-case(toString($str));\r\n}\r\n\r\n@function lower($str) {\r\n  @return to-lower-case(toString($str));\r\n}\r\n\r\n@function toString($str) {\r\n  @return inspect($str);\r\n}\r\n\r\n@function equal($base, $vals...) {\r\n  $result: false;\r\n\r\n  @each $v in $vals {\r\n    @if (upper($base) == upper($v)) {\r\n      $result: true;\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function isNull($obj) {\r\n  $result: true;\r\n\r\n  @if (isCollection(($obj)) and (len($obj) > 0)) {\r\n    $result: false;\r\n  } @else if (isString($obj)) and (str-length($obj) > 0) {\r\n    $result: false;\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function isMap($maps...) {\r\n  $result: true;\r\n\r\n  @each $mp in $maps {\r\n    @if not(equal(type-of($mp), \"Map\")) {\r\n      $result: false;\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function isList($lists...) {\r\n  $result: true;\r\n\r\n  @each $lst in $lists {\r\n    @if not(equal(type-of($lst), \"Number\")) {\r\n      $result: false;\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function isCollection($coll) {\r\n  @return isMap($coll) or isList($coll);\r\n}\r\n\r\n@function isNumeric($nums...) {\r\n  $result: true;\r\n\r\n  @each $nm in $nums {\r\n    @if not(equal(type-of($nm), \"Number\")) {\r\n      $result: false;\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function isBool($value) {\r\n  $result: type-of($value) == \"boolean\";\r\n\r\n  @if not($result) {\r\n    @if (equalMulti($value, \"true\", \"false\")) {\r\n      $result: true;\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function isString($str) {\r\n  @return type-of($str) == \"string\";\r\n}\r\n\r\n@function len($obj) {\r\n  $result: -1;\r\n\r\n  @if (isCollection($obj)) {\r\n    $result: length($obj);\r\n  } @else {\r\n    $result: str-length(toString($obj));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function toCamelCase($str) {\r\n  $progress: $str;\r\n  $result: null;\r\n  $running: true;\r\n\r\n  @while $running {\r\n    $index: str-index($progress, \" \");\r\n\r\n    @if $index {\r\n      $result: $result + toCapitalize(str-slice($progress, 1, $index));\r\n      $progress: str-slice($progress, ($index + 1));\r\n    } @else {\r\n      $running: false;\r\n    }\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function toCapitalize($str) {\r\n  @return upper(str-slice($str, 1, 1)) + str-slice($str, 2);\r\n}\r\n\r\n@function toMapName($name) {\r\n  $result: null;\r\n\r\n  @each $n, $v in $mapIndex {\r\n    @if (equal($name, $n)) {\r\n      $result: $n;\r\n    }\r\n  }\r\n\r\n  @if not($result) {\r\n    @error \"Can't find map named \\\"#{$name}\\\"\";\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function toCPName($name) {\r\n  $result: null;\r\n\r\n  @each $n, $v in $CPs {\r\n    @if (equal($name, $n)) {\r\n      $result: $n;\r\n    }\r\n  }\r\n\r\n  @if not($result) {\r\n    @error \"Can't find Color Profile named \\\"#{$name}\\\"\";\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function toColorName($name) {\r\n  $result: null;\r\n\r\n  @each $val, $color in $cpDefault {\r\n    @if (equal($name, $val)) {\r\n      $result: $val;\r\n    }\r\n  }\r\n\r\n  @if not($result) {\r\n    @error \"Can't find Color named \\\"#{$name}\\\"\";\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function collectionContains($coll, $key) {\r\n  @if not(isCollection(($coll))) {\r\n    @error \"$coll must be of type Map or List\";\r\n  }\r\n\r\n  @return (indexOf($coll, $key));\r\n}\r\n\r\n@function indexOf($coll, $key) {\r\n  $result: null;\r\n\r\n  @if (isList($coll)) {\r\n    $result: index($coll, $key);\r\n  } @else if (isMap($coll)) {\r\n    $i: 1;\r\n\r\n    @each $k, $v in $coll {\r\n      @if (equal($k, $key)) {\r\n        $result: $i;\r\n      }\r\n\r\n      $i: $i + 1;\r\n    }\r\n  } @else {\r\n    @error \"$coll must be of type Map or List\";\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function toCPColorName($name) {\r\n  $result: null;\r\n\r\n  @each $val, $color in $cpDefault {\r\n    @if (equal($name, $val)) {\r\n      $result: $val;\r\n    }\r\n  }\r\n\r\n  @if not($result) {\r\n    @error \"Can't find Color Profile Color with name \\\"#{$name}\\\"\";\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n@function between($min, $max, $val, $inclusive: false) {\r\n  $result: false;\r\n\r\n  @if (isNumeric($min, $max, $val)) {\r\n    @if not($inclusive) {\r\n      $result: $val > $min and $val < $max;\r\n    } @else {\r\n      $result: $val >= $min and $val <= $max;\r\n    }\r\n  } @else {\r\n    @error \"Values must be numeric\";\r\n  }\r\n\r\n  @return $result;\r\n}\r\n"]}