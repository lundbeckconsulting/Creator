{"version":3,"sources":["Layout/_Flex.scss","Layout/_Mixin.scss","_Shared/_Function.scss"],"names":[],"mappings":"AAIA,MACI,QAAS,KAET,WACI,QAAS,KACT,UAAW,KAGf,cACI,QAAS,KACT,UAAW,OAGf,cACI,QAAS,KACT,UAAW,aAGf,WACI,QAAS,KCnBb,gBAAiB,aACjB,YAAa,QACb,cAAe,ODgBd,aCbG,KAAM,EAAA,EAAA,KDkCN,aACI,QAAS,KACT,gBEoLA,OFjLI,kBACI,QAAS,KACT,gBE+KR,OF9KQ,YE8KR,SFjLI,oBACI,QAAS,KACT,gBE+KR,OF9KQ,YE8KR,OFjLI,iBACI,QAAS,KACT,gBE+KR,OF9KQ,YE8KR,SFjLI,mBACI,QAAS,KACT,gBE+KR,OF9KQ,YE8KR,WFjLI,qBACI,QAAS,KACT,gBE+KR,OF9KQ,YE8KR,QFtLJ,UACI,QAAS,KACT,gBEoLA,SFjLI,eACI,QAAS,KACT,gBE+KR,SF9KQ,YE8KR,SFjLI,iBACI,QAAS,KACT,gBE+KR,SF9KQ,YE8KR,OFjLI,cACI,QAAS,KACT,gBE+KR,SF9KQ,YE8KR,SFjLI,gBACI,QAAS,KACT,gBE+KR,SF9KQ,YE8KR,WFjLI,kBACI,QAAS,KACT,gBE+KR,SF9KQ,YE8KR,QFtLJ,YACI,QAAS,KACT,gBEoLA,WFjLI,iBACI,QAAS,KACT,gBE+KR,WF9KQ,YE8KR,SFjLI,mBACI,QAAS,KACT,gBE+KR,WF9KQ,YE8KR,OFjLI,gBACI,QAAS,KACT,gBE+KR,WF9KQ,YE8KR,SFjLI,kBACI,QAAS,KACT,gBE+KR,WF9KQ,YE8KR,WFjLI,oBACI,QAAS,KACT,gBE+KR,WF9KQ,YE8KR,QFtLJ,aACI,QAAS,KACT,gBEoLA,aFjLI,kBACI,QAAS,KACT,gBE+KR,aF9KQ,YE8KR,SFjLI,oBACI,QAAS,KACT,gBE+KR,aF9KQ,YE8KR,OFjLI,iBACI,QAAS,KACT,gBE+KR,aF9KQ,YE8KR,SFjLI,mBACI,QAAS,KACT,gBE+KR,aF9KQ,YE8KR,WFjLI,qBACI,QAAS,KACT,gBE+KR,aF9KQ,YE8KR,QFtLJ,cACI,QAAS,KACT,gBEoLA,cFjLI,mBACI,QAAS,KACT,gBE+KR,cF9KQ,YE8KR,SFjLI,qBACI,QAAS,KACT,gBE+KR,cF9KQ,YE8KR,OFjLI,kBACI,QAAS,KACT,gBE+KR,cF9KQ,YE8KR,SFjLI,oBACI,QAAS,KACT,gBE+KR,cF9KQ,YE8KR,WFjLI,sBACI,QAAS,KACT,gBE+KR,cF9KQ,YE8KR","file":"Layout.Flex.min.css","sourcesContent":["﻿@import \"..\\\\_Shared\\\\Config\";\r\n@import \"..\\\\_Shared\\\\Function\";\r\n@import \"Mixin\";\r\n\r\n.flex {\r\n    display: flex;\r\n\r\n    &-wrap {\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n    }\r\n\r\n    &-no-wrap {\r\n        display: flex;\r\n        flex-wrap: nowrap;\r\n    }\r\n\r\n    &-reverse {\r\n        display: flex;\r\n        flex-wrap: wrap-reverse;\r\n    }\r\n\r\n    &-even {\r\n        display: flex;\r\n\r\n        @include flexEven();\r\n    }\r\n\r\n    @each $show, $full in $flexJustifyItems {\r\n        $just: $show;\r\n        $tag: $show;\r\n\r\n        @if (equalz($just, start, end)) {\r\n            $just: $full;\r\n        }\r\n\r\n        @if (equal($just, around)) {\r\n            $just: space-around;\r\n        }\r\n        @else if (equal($just, between)) {\r\n            $just: space-between;\r\n        }\r\n\r\n        &-#{lower($tag)} {\r\n            display: flex;\r\n            justify-content: lower($just);\r\n\r\n            @each $alignName, $alignVal in $flexAlignItems {\r\n                &-#{lower($alignName)} {\r\n                    display: flex;\r\n                    justify-content: lower($just);\r\n                    align-items: lower($alignVal);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","﻿@import \"..\\\\_Shared\\\\Function\";\r\n@import \"..\\\\_Shared\\\\Config\";\r\n\r\n@mixin flexEven() {\r\n    justify-content: space-around;\r\n    align-items: stretch;\r\n    align-content: center;\r\n\r\n    & > * {\r\n        flex: 1 1 auto;\r\n    }\r\n}\r\n\r\n@mixin head($resize: false) {\r\n    @each $name, $val in $headSyno {\r\n        $size: GET(Head, $val);\r\n\r\n        @if ($resize) {\r\n            @if (equal($name, 1)) {\r\n                $size: $size - 3.4rem;\r\n            }\r\n            @else if (equal($name, 2)) {\r\n                $size: $size - 1.2rem;\r\n            }\r\n            @else if (equal($name, 3)) {\r\n                $size: $size - 1.2rem;\r\n            }\r\n            @else if (equal($name, 4)) {\r\n                $size: $size - 0.4rem;\r\n            }\r\n            @else if (equal($name, 5)) {\r\n                $size: $size - 0.2rem;\r\n            }\r\n        }\r\n\r\n        .h#{$name} {\r\n            font-size: $size;\r\n            font-weight: normal;\r\n\r\n            &-bold {\r\n                font-size: $size;\r\n                font-weight: bold;\r\n            }\r\n\r\n            @each $s, $v in $airyValues {\r\n                &-#{\"airy-\" + lower($s)} {\r\n                    font-size: $size;\r\n                    margin: $v;\r\n                    font-weight: normal;\r\n                }\r\n\r\n                &-#{\"airy-\" + lower($s) + \"-bold\"} {\r\n                    font-size: $size;\r\n                    margin: $v;\r\n                    font-weight: bold;\r\n                }\r\n\r\n                @if (equal($s, MD)) {\r\n                    &-airy {\r\n                        font-size: $size;\r\n                        margin: getAiry();\r\n                        font-weight: normal;\r\n\r\n                        &-bold {\r\n                            font-size: $size;\r\n                            margin: getAiry();\r\n                            font-weight: bold;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","﻿@function color($profileName: Default, $color: Primary) {\r\n    $result: null;\r\n    $profileName: toCPName($profileName);\r\n    $color: toCPColorName($color);\r\n\r\n    @if (map-has-key($CPs, $profileName)) {\r\n        $tmp: map-get($CPs, $profileName);\r\n\r\n        @if (map-has-key($tmp, $color)) {\r\n            $result: map-get($tmp, $color);\r\n        }\r\n        @else {\r\n            @error \"Can't find color with name \\\"#{$color}\\\"\";\r\n        }\r\n    }\r\n    @else {\r\n        @error \"Can't find Color Profile with name \\\"#{$name}\\\"\";\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function mapExists($mapName: Modal) {\r\n    @return map-has-key($mapIndex, toMapName($mapName));\r\n}\r\n\r\n@function GET($mapName: Sys, $key: null) {\r\n    $result: null;\r\n    $mapName: toMapName($mapName);\r\n\r\n    @if (map-has-key($mapIndex, $mapName)) {\r\n        $tmp: map-get($mapIndex, $mapName);\r\n\r\n        @if ($key) {\r\n            $result: map-get(map-get($tmp, Data), $key);\r\n        }\r\n        @else {\r\n            $result: $tmp;\r\n        }\r\n    }\r\n    @else {\r\n        //test ds  \r\n\r\n        @error \"Map with name \\\"#{$name}\\\" doesn't exist\";\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function upper($str) {\r\n    @return to-upper-case(toString($str));\r\n}\r\n\r\n@function lower($str) {\r\n    @return to-lower-case(toString($str));\r\n}\r\n\r\n@function toString($str) {\r\n    @return inspect($str);\r\n}\r\n\r\n@function toBoolean($value) {\r\n    @return equalz($value, true, false);\r\n}\r\n\r\n@function equal($base, $val) {\r\n    @return equalz($base, $val);\r\n}\r\n\r\n@function equalz($base, $vals...) {\r\n    $result: false;\r\n\r\n    @each $v in $vals {\r\n        @if (upper($base) == upper($v)) {\r\n            $result: true;\r\n        }\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function isNull($obj) {\r\n    $result: true;\r\n    $length: length($obj);\r\n\r\n    @if (isMap($obj)) and ($length > 0) {\r\n        $result: false;\r\n    }\r\n    @else if (isList($obj)) and ($length > 0) {\r\n        $result: false;\r\n    }\r\n    @else if (isString($obj)) and (str-length($obj) > 0) {\r\n        $result: false;\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function isMap($map) {\r\n    @return type-of($map) == 'map';\r\n}\r\n\r\n@function isList($list) {\r\n    @return type-of($list) == 'list';\r\n}\r\n\r\n@function isString($str) {\r\n    @return type-of($str) == 'string';\r\n}\r\n\r\n@function isCollection($coll) {\r\n    $result: false;\r\n\r\n    @if (isMap($coll)) or (isList($coll)) {\r\n        $result: true;\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function isNumber($value) {\r\n    @return type-of($value) == \"number\";\r\n}\r\n\r\n@function isInt($value) {\r\n    @return isNumber($value) and round($value) == $value;\r\n}\r\n\r\n@function isBool($value) {\r\n    $result: type-of($value) == \"boolean\";\r\n    \r\n    @if not ($result) {\r\n        @if (equalz($value, \"true\", \"false\")) {\r\n            $result: true;\r\n        }\r\n    }\r\n    \r\n    @return $result;\r\n}\r\n\r\n@function len($obj) {\r\n    @return length($obj);\r\n}\r\n\r\n@function toCamelCase($str) {\r\n    $progress: $str;\r\n    $result: null;\r\n    $running: true;\r\n\r\n    @while $running {\r\n        $index: str-index($progress, \" \");\r\n\r\n        @if $index {\r\n            $result: $result + toCapitalize(str-slice($progress, 1, $index));\r\n            $progress: str-slice($progress, ($index + 1));\r\n        }\r\n        @else {\r\n            $running: false;\r\n        }\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function toCapitalize($str) {\r\n    @return upper(str-slice($str, 1, 1)) + str-slice($str, 2);\r\n}\r\n\r\n@function listContains($list, $key) {\r\n    @return (false == index($list, $key));\r\n}\r\n\r\n@function toMapName($name) {\r\n    $result: null;\r\n\r\n    @each $n, $v in $mapIndex {\r\n        @if (equal($name, $n)) {\r\n            $result: $n;\r\n        }\r\n    }\r\n\r\n    @if not ($result) {\r\n        @error \"Can't find map with name \\\"#{$name}\\\"\";\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function toCPName($name) {\r\n    $result: null;\r\n\r\n    @each $n, $v in $CPs {\r\n        @if (equal($name, $n)) {\r\n            $result: $n;\r\n        }\r\n    }\r\n\r\n    @if not ($result) {\r\n        @error \"Can't find Color Profile with name \\\"#{$name}\\\"\";\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function toCPColorName($name) {\r\n    $result: null;\r\n\r\n    @each $val, $color in $cpDefault {\r\n        @if (equal($name, $val)) {\r\n            $result: $val;\r\n        }\r\n    }\r\n\r\n    @if not ($result) {\r\n        @error \"Can't find Color Profile Color with name \\\"#{$name}\\\"\";\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function upper($str) {\r\n    @return to-upper-case(toString($str));\r\n}\r\n\r\n@function lower($str) {\r\n    @return to-lower-case(toString($str));\r\n}\r\n\r\n@function toString($str) {\r\n    @return inspect($str);\r\n}\r\n\r\n@function toBoolean($value) {\r\n    @return equalz($value, true, false);\r\n}\r\n\r\n@function equal($base, $val) {\r\n    @return equalz($base, $val);\r\n}\r\n\r\n@function equalz($base, $vals...) {\r\n    $result: false;\r\n\r\n    @each $v in $vals {\r\n        @if (upper($base) == upper($v)) {\r\n            $result: true;\r\n        }\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function isNull($obj) {\r\n    $result: true;\r\n    $length: length($obj);\r\n\r\n    @if (isMap($obj)) and ($length > 0) {\r\n        $result: false;\r\n    }\r\n    @else if (isList($obj)) and ($length > 0) {\r\n        $result: false;\r\n    }\r\n    @else if (isString($obj)) and (str-length($obj) > 0) {\r\n        $result: false;\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function isMap($map) {\r\n    @return type-of($map) == 'map';\r\n}\r\n\r\n@function isList($list) {\r\n    @return type-of($list) == 'list';\r\n}\r\n\r\n@function isString($str) {\r\n    @return type-of($str) == 'string';\r\n}\r\n\r\n@function isCollection($coll) {\r\n    $result: false;\r\n\r\n    @if (isMap($coll)) or (isList($coll)) {\r\n        $result: true;\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function isNumber($value) {\r\n    @return type-of($value) == \"number\";\r\n}\r\n\r\n@function isInt($value) {\r\n    @return isNumber($value) and round($value) == $value;\r\n}\r\n\r\n@function isBool($value) {\r\n    $result: type-of($value) == \"boolean\";\r\n    \r\n    @if not ($result) {\r\n        @if (equalz($value, \"true\", \"false\")) {\r\n            $result: true;\r\n        }\r\n    }\r\n    \r\n    @return $result;\r\n}\r\n\r\n@function len($obj) {\r\n    @return length($obj);\r\n}\r\n\r\n@function toCamelCase($str) {\r\n    $progress: $str;\r\n    $result: null;\r\n    $running: true;\r\n\r\n    @while $running {\r\n        $index: str-index($progress, \" \");\r\n\r\n        @if $index {\r\n            $result: $result + toCapitalize(str-slice($progress, 1, $index));\r\n            $progress: str-slice($progress, ($index + 1));\r\n        }\r\n        @else {\r\n            $running: false;\r\n        }\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function toCapitalize($str) {\r\n    @return upper(str-slice($str, 1, 1)) + str-slice($str, 2);\r\n}\r\n\r\n@function listContains($list, $key) {\r\n    @return (false == index($list, $key));\r\n}\r\n\r\n@function toMapName($name) {\r\n    $result: null;\r\n\r\n    @each $n, $v in $mapIndex {\r\n        @if (equal($name, $n)) {\r\n            $result: $n;\r\n        }\r\n    }\r\n\r\n    @if not ($result) {\r\n        @error \"Can't find map with name \\\"#{$name}\\\"\";\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function toCPName($name) {\r\n    $result: null;\r\n\r\n    @each $n, $v in $CPs {\r\n        @if (equal($name, $n)) {\r\n            $result: $n;\r\n        }\r\n    }\r\n\r\n    @if not ($result) {\r\n        @error \"Can't find Color Profile with name \\\"#{$name}\\\"\";\r\n    }\r\n\r\n    @return $result;\r\n}\r\n\r\n@function toCPColorName($name) {\r\n    $result: null;\r\n\r\n    @each $val, $color in $cpDefault {\r\n        @if (equal($name, $val)) {\r\n            $result: $val;\r\n        }\r\n    }\r\n\r\n    @if not ($result) {\r\n        @error \"Can't find Color Profile Color with name \\\"#{$name}\\\"\";\r\n    }\r\n\r\n    @return $result;\r\n}"]}