{"version":3,"sources":["WebRequest.js"],"names":["RequestModes","SameOrigin","NoCors","Cors","RequestMethods","GET","POST","PUT","DELETE","RequestCredentials","Include","Omit","Enums","RequestResult","rsp","response","Response","Success","this","ok","Status","status","StatusText","statusText","WebRequest","async","controller","action","query","data","method","mode","creds","headers","Content-Type","Accept","fetch","result","i","q","GetUrl","credentials","body","then","Error","catch","error"],"mappings":"AAAA,MAAMA,aAAe,CACnBC,WAAY,cACZC,OAAQ,UACRC,KAAM,QAGFC,eAAiB,CACrBC,IAAK,MACLC,KAAM,OACNC,IAAK,MACLC,OAAQ,UAGJC,mBAAqB,CACzBC,QAAS,UACTC,KAAM,OACNV,WAAY,sBAGP,MAAMW,MAAQ,cAMd,MAAMC,cAAgBC,IAC3B,IAAIC,EAAW,KAEVC,SAAW,KAAMD,GACjBE,QAAU,KAAMC,KAAKF,SAASG,IAC9BC,OAAS,KAAMF,KAAKF,SAASK,QAC7BC,WAAa,KAAMJ,KAAKF,SAASO,YAEjCP,SAAWF,CAAAA,GAAOC,EAAWD,WAG7B,MAAMU,WAAaC,MAAOC,EAAa,MAAOC,EAAQC,EAAQ,GAAIC,EAAO,GAAIC,EAAS1B,eAAeE,KAAMyB,EAAO/B,aAAaC,WAAY+B,EAAQvB,mBAAmBR,WAAYgC,EAAU,CAC/LC,eAAgB,mBAChBC,OAAU,6BAENC,MAkBN,WACE,IAAIC,EAAS,IAAMX,EAAa,IAAMC,EAElCW,EAAI,EACR,IAAK,IAAIC,KAAKX,EAEVS,GADQ,IAANC,EACQ,IAEA,IAGZD,GAAUE,EAAE,GAAK,IAAMA,EAAE,GAEzBD,IAGF,OAAOD,EAlCGG,GAAU,CACpBV,OAAQA,EACRG,QAASA,EACTQ,YAAaT,EACbU,KAAMb,EACNE,KAAMA,IAELY,KAAK5B,IACJ,GAAIA,EAASI,GACX,OAAON,gBAEP,MAAM,IAAI+B,MAAM,mBAAqB7B,EAASM,OAAS,KAAON,EAASQ,cAG1EsB,MAAMC,IACL,MAAM,IAAIF,MAAM,UAAYE,EAAMvB,WAAYuB","sourcesContent":["const RequestModes = {\r\n  SameOrigin: \"same-origin\",\r\n  NoCors: \"no-cors\",\r\n  Cors: \"cors\"\r\n};\r\n\r\nconst RequestMethods = {\r\n  GET: \"GET\",\r\n  POST: \"POST\",\r\n  PUT: \"PUT\",\r\n  DELETE: \"DELETE\"\r\n};\r\n\r\nconst RequestCredentials = {\r\n  Include: \"include\",\r\n  Omit: \"omit\",\r\n  SameOrigin: \"same-origin\"\r\n};\r\n\r\nexport const Enums = () => {\r\n  get: () => RequestMethods;\r\n  get: () => RequestModes;\r\n  get: () => RequestCredentials;\r\n}\r\n\r\nexport const RequestResult = rsp => {\r\n  var response = null;\r\n\r\n  get: Response = () => response;\r\n  get: Success = () => this.Response.ok;\r\n  get: Status = () => this.Response.status;\r\n  get: StatusText = () => this.Response.statusText;\r\n\r\n  set: Response = rsp => response = rsp;\r\n};\r\n\r\nexport const WebRequest = async (controller = \"API\", action, query = {}, data = {}, method = RequestMethods.POST, mode = RequestModes.SameOrigin, creds = RequestCredentials.SameOrigin, headers = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n  }) => {\r\n  await fetch(GetUrl(), {\r\n    method: method,\r\n    headers: headers,\r\n    credentials: creds,\r\n    body: data,\r\n    mode: mode\r\n  })\r\n    .then(response => {\r\n      if (response.ok) {\r\n        return RequestResult(response);\r\n      } else {\n        throw new Error(\"Request failed: \" + response.status + \"; \" + response.statusText);\n      }\r\n    })\r\n    .catch(error => {\n      throw new Error(\"Error: \" + error.statusText, error)\n    });\r\n\r\n  function GetUrl() {\r\n    var result = \"/\" + controller + \"/\" + action;\r\n\r\n    var i = 0;\r\n    for (var q in query) {\r\n      if (i === 0) {\r\n        result += \"?\";\r\n      } else {\r\n        result += \"&\";\r\n      }\r\n\r\n      result += q[0] + \"=\" + q[1];\r\n\r\n      i++;\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\n//# sourceMappingURL=WebRequest.js.map\r\n"],"file":"WebRequest.min.js"}